#!/bin/bash

# Script para testar a configura√ß√£o do Nginx
# Valida sintaxe, SSL, e configura√ß√µes de resili√™ncia

set -e

echo "üîç Testando configura√ß√£o do Nginx..."
echo "=================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir status
print_status() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${RED}‚ùå $1${NC}"
        exit 1
    fi
}

# Fun√ß√£o para imprimir info
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Fun√ß√£o para imprimir warning
print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

echo "1Ô∏è‚É£ Verificando sintaxe da configura√ß√£o..."
nginx -t
print_status "Sintaxe da configura√ß√£o est√° correta"

echo ""
echo "2Ô∏è‚É£ Verificando configura√ß√µes SSL..."

# Verificar se certificados existem
if [ -f "/etc/letsencrypt/live/svlentes.com.br/fullchain.pem" ]; then
    echo -e "${GREEN}‚úÖ Certificado SSL svlentes.com.br encontrado${NC}"

    # Verificar validade do certificado
    EXPIRY_DATE=$(openssl x509 -in /etc/letsencrypt/live/svlentes.com.br/fullchain.pem -noout -enddate | cut -d= -f2)
    EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s)
    CURRENT_TIMESTAMP=$(date +%s)
    DAYS_LEFT=$(( ($EXPIRY_TIMESTAMP - $CURRENT_TIMESTAMP) / 86400 ))

    if [ $DAYS_LEFT -gt 30 ]; then
        echo -e "${GREEN}‚úÖ Certificado v√°lido por $DAYS_LEFT dias${NC}"
    elif [ $DAYS_LEFT -gt 7 ]; then
        print_warning "Certificado expira em $DAYS_LEFT dias (renovar em breve)"
    else
        print_warning "Certificado expira em $DAYS_LEFT dias (renova√ß√£o urgente!)"
    fi
else
    print_warning "Certificado SSL svlentes.com.br n√£o encontrado"
fi

if [ -f "/etc/letsencrypt/live/svlentes.shop/fullchain.pem" ]; then
    echo -e "${GREEN}‚úÖ Certificado SSL svlentes.shop encontrado${NC}"

    EXPIRY_DATE=$(openssl x509 -in /etc/letsencrypt/live/svlentes.shop/fullchain.pem -noout -enddate | cut -d= -f2)
    EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s)
    CURRENT_TIMESTAMP=$(date +%s)
    DAYS_LEFT=$(( ($EXPIRY_TIMESTAMP - $CURRENT_TIMESTAMP) / 86400 ))

    if [ $DAYS_LEFT -gt 30 ]; then
        echo -e "${GREEN}‚úÖ Certificado v√°lido por $DAYS_LEFT dias${NC}"
    else
        print_warning "Certificado expira em $DAYS_LEFT dias"
    fi
else
    print_warning "Certificado SSL svlentes.shop n√£o encontrado"
fi

echo ""
echo "3Ô∏è‚É£ Verificando m√≥dulos do Nginx..."

# Verificar se m√≥dulos necess√°rios est√£o carregados
if nginx -V 2>&1 | grep -q "http_stub_status_module"; then
    echo -e "${GREEN}‚úÖ M√≥dulo stub_status carregado${NC}"
else
    print_warning "M√≥dulo stub_status n√£o encontrado (afeta nginx_status)"
fi

if nginx -V 2>&1 | grep -q "http_limit_req_module"; then
    echo -e "${GREEN}‚úÖ M√≥dulo limit_req carregado${NC}"
else
    print_warning "M√≥dulo limit_req n√£o encontrado (afeta rate limiting)"
fi

if nginx -V 2>&1 | grep -q "http_ssl_module"; then
    echo -e "${GREEN}‚úÖ M√≥dulo SSL carregado${NC}"
else
    echo -e "${RED}‚ùå M√≥dulo SSL n√£o encontrado${NC}"
    exit 1
fi

if nginx -V 2>&1 | grep -q "http_gzip_module"; then
    echo -e "${GREEN}‚úÖ M√≥dulo gzip carregado${NC}"
else
    print_warning "M√≥dulo gzip n√£o encontrado (afeta compress√£o)"
fi

echo ""
echo "4Ô∏è‚É£ Verificando configura√ß√µes de resili√™ncia..."

# Verificar se o Next.js est√° rodando
if curl -s -f http://localhost:5000/api/health-check > /dev/null; then
    echo -e "${GREEN}‚úÖ Next.js responder em localhost:5000${NC}"

    # Testar health check
    HEALTH_RESPONSE=$(curl -s http://localhost:5000/api/health-check)
    if echo "$HEALTH_RESPONSE" | grep -q "healthy\|status"; then
        echo -e "${GREEN}‚úÖ Health check endpoint funcionando${NC}"
    else
        print_warning "Health check endpoint respondeu mas formato inesperado"
    fi
else
    print_warning "Next.js n√£o est√° respondendo em localhost:5000"
    echo "   Inicie o servi√ßo: systemctl start svlentes-nextjs"
fi

# Verificar portas
echo ""
echo "5Ô∏è‚É£ Verificando portas..."

if netstat -tlnp | grep -q ":80.*nginx"; then
    echo -e "${GREEN}‚úÖ Nginx escutando na porta 80${NC}"
else
    print_warning "Nginx n√£o est√° escutando na porta 80"
fi

if netstat -tlnp | grep -q ":443.*nginx"; then
    echo -e "${GREEN}‚úÖ Nginx escutando na porta 443${NC}"
else
    print_warning "Nginx n√£o est√° escutando na porta 443"
fi

if netstat -tlnp | grep -q ":5000.*node"; then
    echo -e "${GREEN}‚úÖ Next.js escutando na porta 5000${NC}"
else
    print_warning "Next.js n√£o est√° escutando na porta 5000"
fi

echo ""
echo "6Ô∏è‚É£ Verificando configura√ß√µes de seguran√ßa..."

# Testar cabe√ßalhos de seguran√ßa
echo "Testando cabe√ßalhos HTTPS..."
SECURITY_HEADERS=$(curl -s -I https://svlentes.com.br 2>/dev/null || echo "")

if echo "$SECURITY_HEADERS" | grep -q "Strict-Transport-Security"; then
    echo -e "${GREEN}‚úÖ HSTS header presente${NC}"
else
    print_warning "HSTS header n√£o encontrado"
fi

if echo "$SECURITY_HEADERS" | grep -q "X-Frame-Options"; then
    echo -e "${GREEN}‚úÖ X-Frame-Options header presente${NC}"
else
    print_warning "X-Frame-Options header n√£o encontrado"
fi

if echo "$SECURITY_HEADERS" | grep -q "X-Content-Type-Options"; then
    echo -e "${GREEN}‚úÖ X-Content-Type-Options header presente${NC}"
else
    print_warning "X-Content-Type-Options header n√£o encontrado"
fi

echo ""
echo "7Ô∏è‚É£ Testando endpoints cr√≠ticos..."

# Testar endpoints importantes
test_endpoint() {
    local url="$1"
    local name="$2"

    echo -n "   Testando $name... "
    if curl -s -f -m 10 "$url" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ OK${NC}"
    else
        echo -e "${RED}‚ùå FALHA${NC}"
        return 1
    fi
}

test_endpoint "https://svlentes.com.br" "Homepage"
test_endpoint "https://svlentes.com.br/api/health-check" "Health Check API"
test_endpoint "https://svlentes.com.br/nginx_health" "Nginx Health"

echo ""
echo "8Ô∏è‚É£ Verificando logs e configura√ß√µes de sistema..."

# Verificar se os logs existem e s√£o grav√°veis
if [ -f "/var/log/nginx/svlentes.com.br.access.log" ]; then
    echo -e "${GREEN}‚úÖ Access log existe${NC}"
    if [ -w "/var/log/nginx/svlentes.com.br.access.log" ]; then
        echo -e "${GREEN}‚úÖ Access log √© grav√°vel${NC}"
    else
        print_warning "Access log n√£o √© grav√°vel"
    fi
else
    print_warning "Access log n√£o existe"
fi

if [ -f "/var/log/nginx/svlentes.com.br.error.log" ]; then
    echo -e "${GREEN}‚úÖ Error log existe${NC}"
    if [ -w "/var/log/nginx/svlentes.com.br.error.log" ]; then
        echo -e "${GREEN}‚úÖ Error log √© grav√°vel${NC}"
    else
        print_warning "Error log n√£o √© grav√°vel"
    fi
else
    print_warning "Error log n√£o existe"
fi

# Verificar status do servi√ßo Nginx
if systemctl is-active --quiet nginx; then
    echo -e "${GREEN}‚úÖ Servi√ßo Nginx est√° ativo${NC}"
else
    print_warning "Servi√ßo Nginx n√£o est√° ativo"
fi

if systemctl is-enabled --quiet nginx; then
    echo -e "${GREEN}‚úÖ Servi√ßo Nginx est√° habilitado para iniciar no boot${NC}"
else
    print_warning "Servi√ßo Nginx n√£o est√° habilitado para iniciar no boot"
fi

echo ""
echo "9Ô∏è‚É£ Resumo da configura√ß√£o de resili√™ncia..."

# Analisar configura√ß√µes espec√≠ficas de resili√™ncia
echo -e "${BLUE}Analisando configura√ß√µes de resili√™ncia implementadas:${NC}"

# Verificar upstream
if grep -q "upstream nextjs_backend" /etc/nginx/sites-available/svlentes.com.br; then
    echo -e "${GREEN}‚úÖ Load balancing upstream configurado${NC}"
else
    print_warning "Load balancing upstream n√£o configurado"
fi

# Verificar rate limiting
if grep -q "limit_req_zone" /etc/nginx/sites-available/svlentes.com.br; then
    echo -e "${GREEN}‚úÖ Rate limiting configurado${NC}"
else
    print_warning "Rate limiting n√£o configurado"
fi

# Verificar timeouts
if grep -q "proxy_next_upstream" /etc/nginx/sites-available/svlentes.com.br; then
    echo -e "${GREEN}‚úÖ Retry e fallback configurados${NC}"
else
    print_warning "Retry e fallback n√£o configurados"
fi

# Verificar cache
if grep -q "gzip on" /etc/nginx/sites-available/svlentes.com.br; then
    echo -e "${GREEN}‚úÖ Compress√£o gzip configurada${NC}"
else
    print_warning "Compress√£o gzip n√£o configurada"
fi

# Verificar fallback page
if grep -q "@fallback_page" /etc/nginx/sites-available/svlentes.com.br; then
    echo -e "${GREEN}‚úÖ P√°gina de fallback configurada${NC}"
else
    print_warning "P√°gina de fallback n√£o configurada"
fi

# Verificar health check dedicado
if grep -q "location /api/health-check" /etc/nginx/sites-available/svlentes.com.br; then
    echo -e "${GREEN}‚úÖ Health check dedicado configurado${NC}"
else
    print_warning "Health check dedicado n√£o configurado"
fi

echo ""
echo "üéâ Teste conclu√≠do!"
echo "=================================="

# Resumo final
echo -e "${GREEN}‚úÖ Configura√ß√£o do Nginx validada com sucesso${NC}"
echo -e "${BLUE}üìä Sistema otimizado para resili√™ncia e performance${NC}"
echo ""
echo "üìã Comandos √∫teis:"
echo "   ‚Ä¢ Recarregar Nginx: systemctl reload nginx"
echo "   ‚Ä¢ Reiniciar Nginx: systemctl restart nginx"
echo "   ‚Ä¢ Verificar status: systemctl status nginx"
echo "   ‚Ä¢ Verificar logs: journalctl -u nginx -f"
echo "   ‚Ä¢ Testar config: nginx -t"
echo ""
echo "üîó Endpoints de monitoramento:"
echo "   ‚Ä¢ Health Check: https://svlentes.com.br/api/health-check"
echo "   ‚Ä¢ Nginx Health: https://svlentes.com.br/nginx_health"
echo "   ‚Ä¢ Server Status: https://svlentes.com.br/nginx_status (interno)"
echo ""
echo -e "${YELLOW}üí° Dicas adicionais:${NC}"
echo "   ‚Ä¢ Monitore os logs regularmente para detectar problemas"
echo "   ‚Ä¢ Configure alertas para taxas de erro altas"
echo "   ‚Ä¢ Teste a p√°gina de fallback desabilitando o Next.js"
echo "   ‚Ä¢ Verifique a renova√ß√£o autom√°tica dos certificados SSL"