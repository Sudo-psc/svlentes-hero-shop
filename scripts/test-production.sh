#!/bin/bash

# Script de Teste em Produ√ß√£o (via Nginx)
# Verifica se a aplica√ß√£o funciona corretamente atrav√©s do proxy reverso

set -e

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configura√ß√µes
DOMAIN="svlentes.com.br"
BASE_URL="https://$DOMAIN"
API_BASE="$BASE_URL/api"

# Fun√ß√µes de log
log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

error() {
    echo -e "${RED}‚úó${NC} $1"
}

warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

# Testa resolu√ß√£o DNS
test_dns() {
    log "Verificando resolu√ß√£o DNS..."

    if nslookup "$DOMAIN" > /dev/null 2>&1; then
        local ip=$(nslookup "$DOMAIN" | grep -A1 "Name:" | tail -1 | awk '{print $2}')
        success "DNS resolvido: $DOMAIN ‚Üí $ip"
    else
        error "DNS n√£o resolve para $DOMAIN"
        exit 1
    fi
}

# Testa conex√£o HTTPS
test_ssl() {
    log "Verificando certificado SSL..."

    if curl -sI "$BASE_URL" | grep -qi "200 OK"; then
        success "Conex√£o HTTPS estabelecida"

        # Verifica validade do certificado
        local expiry=$(echo | openssl s_client -servername "$DOMAIN" -connect "$DOMAIN:443" 2>/dev/null | openssl x509 -noout -enddate | cut -d= -f2)
        if [[ -n "$expiry" ]]; then
            success "Certificado v√°lido at√©: $expiry"
        else
            warning "N√£o foi poss√≠vel verificar validade do certificado"
        fi
    else
        error "Falha na conex√£o HTTPS"
        exit 1
    fi
}

# Testa nginx como proxy reverso
test_nginx() {
    log "Verificando configura√ß√£o do nginx..."

    # Verifica se est√° respondendo
    if curl -sf "$BASE_URL" > /dev/null; then
        success "Nginx respondendo como proxy reverso"
    else
        error "Nginx n√£o est√° respondendo"
        exit 1
    fi

    # Verifica headers espec√≠ficos do nginx
    local headers=$(curl -s -I "$BASE_URL")

    if echo "$headers" | grep -qi "nginx"; then
        success "Servidor Nginx identificado"
    else
        warning "Header do Nginx n√£o encontrado"
    fi
}

# Testa aplica√ß√£o atrav√©s do proxy
test_app_through_proxy() {
    log "Testando aplica√ß√£o atrav√©s do proxy..."

    # Health check
    if curl -sf "$BASE_URL/api/health-check" > /dev/null; then
        success "Health check funcionando atrav√©s do proxy"
    else
        error "Health check n√£o acess√≠vel atrav√©s do proxy"
        return 1
    fi

    # Testa p√°gina principal
    if curl -sf "$BASE_URL" > /dev/null; then
        success "P√°gina principal acess√≠vel"
    else
        error "P√°gina principal n√£o acess√≠vel"
    fi
}

# Testa API da calculadora
test_pricing_api() {
    log "\nTestando API da Calculadora de Pre√ßos..."

    # Lista planos
    if response=$(curl -s "$BASE_URL/api/admin/pricing/planos"); then
        if echo "$response" | grep -q "planos"; then
            success "API de planos acess√≠vel"
            local count=$(echo "$response" | jq -r '.planos | length' 2>/dev/null || echo "?")
            echo "  ‚îî‚îÄ $count planos dispon√≠veis"
        else
            error "Resposta inv√°lida da API de planos"
        fi
    else
        error "API de planos n√£o acess√≠vel"
    fi

    # Testa custos
    if curl -sf "$BASE_URL/api/admin/pricing/costs" > /dev/null; then
        success "API de custos acess√≠vel"
    else
        warning "API de custos pode n√£o estar implementada"
    fi
}

# Testa performance atrav√©s do proxy
test_performance() {
    log "\nTestando performance atrav√©s do proxy..."

    # Mede tempo de carregamento da p√°gina
    local start_time=$(date +%s%N)
    if curl -sf "$BASE_URL" > /dev/null; then
        local end_time=$(date +%s%N)
        local duration=$(((end_time - start_time) / 1000000))

        if [[ $duration -lt 1000 ]]; then
            success "P√°gina carregou em ${duration}ms ‚úì"
        elif [[ $duration -lt 2000 ]]; then
            warning "P√°gina carregou em ${duration}ms (aceit√°vel)"
        else
            error "P√°gina carregou em ${duration}ms (lento)"
        fi
    else
        error "Falha ao medir performance"
    fi

    # Testa cache de recursos est√°ticos
    log "Verificando cache de recursos est√°ticos..."
    if headers=$(curl -s -I "$BASE_URL/_next/static/chunks/main-app.js"); then
        if echo "$headers" | grep -qi "cache-control"; then
            success "Cache configurado para recursos est√°ticos"
        else
            warning "Cache pode n√£o estar configurado"
        fi
    fi
}

# Testa headers de seguran√ßa
test_security_headers() {
    log "\nVerificando headers de seguran√ßa..."

    if headers=$(curl -s -I "$BASE_URL"); then
        local security_headers=0
        local total_headers=5

        # HSTS
        if echo "$headers" | grep -qi "strict-transport-security"; then
            success "HSTS configurado"
            ((security_headers++))
        else
            error "HSTS n√£o configurado"
        fi

        # CSP
        if echo "$headers" | grep -qi "content-security-policy"; then
            success "CSP configurado"
            ((security_headers++))
        else
            error "CSP n√£o configurado"
        fi

        # X-Frame-Options
        if echo "$headers" | grep -qi "x-frame-options"; then
            success "X-Frame-Options configurado"
            ((security_headers++))
        else
            error "X-Frame-Options n√£o configurado"
        fi

        # X-Content-Type-Options
        if echo "$headers" | grep -qi "x-content-type-options"; then
            success "X-Content-Type-Options configurado"
            ((security_headers++))
        else
            error "X-Content-Type-Options n√£o configurado"
        fi

        # Referrer-Policy
        if echo "$headers" | grep -qi "referrer-policy"; then
            success "Referrer-Policy configurado"
            ((security_headers++))
        else
            error "Referrer-Policy n√£o configurado"
        fi

        # Resumo
        local security_score=$((security_headers * 100 / total_headers))
        echo ""
        log "Score de seguran√ßa: $security_score% ($security_headers/$total_headers headers)"
    else
        error "N√£o foi poss√≠vel obter headers"
    fi
}

# Testa redirecionamentos
test_redirects() {
    log "\nTestando redirecionamentos..."

    # Testa HTTP ‚Üí HTTPS
    if http_code=$(curl -s -o /dev/null -w "%{http_code}" "http://$DOMAIN"); then
        if [[ $http_code -eq 301 ]] || [[ $http_code -eq 302 ]]; then
            success "HTTP ‚Üí HTTPS redirecionamento funcionando"
        else
            error "HTTP ‚Üí HTTPS redirecionamento n√£o funcionou (c√≥digo: $http_code)"
        fi
    else
        error "N√£o foi poss√≠vel testar redirecionamento HTTP"
    fi

    # Testa redirecionamento de dom√≠nio alternativo (se configurado)
    local alt_domain="svlentes.com.br"
    if nslookup "$alt_domain" > /dev/null 2>&1; then
        if http_code=$(curl -s -o /dev/null -w "%{http_code}" "https://$alt_domain"); then
            if [[ $http_code -eq 301 ]] || [[ $http_code -eq 302 ]]; then
                success "Redirecionamento $alt_domain ‚Üí $DOMAIN funcionando"
            else
                warning "Redirecionamento $alt_domain ‚Üí $DOMAIN pode n√£o estar configurado"
            fi
        fi
    fi
}

# Gera relat√≥rio final
generate_report() {
    log "\n========================================"
    echo "üìä Relat√≥rio de Testes em Produ√ß√£o"
    echo "========================================"
    echo ""
    echo "‚úÖ Testes executados:"
    echo "  ‚Ä¢ Resolu√ß√£o DNS"
    echo "  ‚Ä¢ Certificado SSL/TLS"
    echo "  ‚Ä¢ Configura√ß√£o do Nginx"
    echo "  ‚Ä¢ Aplica√ß√£o atrav√©s do proxy"
    echo "  ‚Ä¢ API da Calculadora de Pre√ßos"
    echo "  ‚Ä¢ Performance"
    echo "  ‚Ä¢ Headers de seguran√ßa"
    echo "  ‚Ä¢ Redirecionamentos"
    echo ""
    echo "üåê URLs de produ√ß√£o:"
    echo "  ‚Ä¢ Principal: $BASE_URL"
    echo "  ‚Ä¢ API: $API_BASE"
    echo "  ‚Ä¢ Calculadora: $BASE_URL/admin/pricing-calculator"
    echo ""
    echo "üîß Servi√ßos verificados:"
    echo "  ‚Ä¢ DNS: funcionando"
    echo "  ‚Ä¢ SSL: funcionando"
    echo "  ‚Ä¢ Nginx: funcionando como proxy reverso"
    echo "  ‚Ä¢ Next.js: funcionando via systemd"
    echo ""
    echo "üí° Recomenda√ß√µes:"
    echo "  ‚Ä¢ Monitore o certificado SSL para renova√ß√£o autom√°tica"
    echo "  ‚Ä¢ Configure alertas de uptime"
    echo "  ‚Ä¢ Implemente backup autom√°tico dos dados"
    echo "  ‚Ä¢ Monitore os logs de acesso e erro"
    echo ""
    success "Testes em produ√ß√£o conclu√≠dos!"
}

# Fun√ß√£o principal
main() {
    echo "üîç Testando SV Lentes em Produ√ß√£o"
    echo "========================================"
    echo "Dom√≠nio: $DOMAIN"
    echo ""

    test_dns
    test_ssl
    test_nginx
    test_app_through_proxy
    test_pricing_api
    test_performance
    test_security_headers
    test_redirects
    generate_report
}

# Executa testes
main "$@"