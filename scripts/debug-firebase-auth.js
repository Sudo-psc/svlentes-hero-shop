#!/usr/bin/env node

/**
 * Script para debug da autentica√ß√£o Google/Firebase
 * Verifica configura√ß√£o e testa conex√£o com os servi√ßos do Firebase
 */

// Carregar vari√°veis de ambiente do arquivo .env.local
require('dotenv').config({ path: '.env.local' });

const { initializeApp } = require('firebase/app');
const { getAuth, signInWithPopup, GoogleAuthProvider } = require('firebase/auth');

console.log('üîç Firebase Authentication Debug Tool');
console.log('=====================================\n');

// 1. Verificar vari√°veis de ambiente
console.log('üìã Verificando vari√°veis de ambiente:');
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

const requiredFields = ['apiKey', 'authDomain', 'projectId', 'appId'];
let configValid = true;

requiredFields.forEach(field => {
  if (firebaseConfig[field]) {
    console.log(`‚úÖ ${field}: ${firebaseConfig[field]}`);
  } else {
    console.log(`‚ùå ${field}: N√ÉO DEFINIDO`);
    configValid = false;
  }
});

console.log(`\nüåê APP_URL: ${process.env.NEXT_PUBLIC_APP_URL || 'N√ÉO DEFINIDO'}`);

if (!configValid) {
  console.log('\n‚ùå Configura√ß√£o Firebase inv√°lida! Verifique as vari√°veis de ambiente.');
  process.exit(1);
}

// 2. Inicializar Firebase
console.log('\nüîß Inicializando Firebase...');
try {
  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  console.log('‚úÖ Firebase inicializado com sucesso');
  console.log(`üì¶ Project ID: ${firebaseConfig.projectId}`);
  console.log(`üîó Auth Domain: ${firebaseConfig.authDomain}`);
} catch (error) {
  console.log('‚ùå Erro ao inicializar Firebase:', error.message);
  process.exit(1);
}

// 3. Verificar dom√≠nios autorizados
console.log('\nüîí Verifica√ß√£o de dom√≠nios autorizados:');
console.log('‚ö†Ô∏è  Verifique manualmente no Firebase Console:');
console.log(`   ‚Ä¢ Firebase Console ‚Üí Authentication ‚Üí Settings ‚Üí Authorized domains`);
console.log(`   ‚Ä¢ Adicione os dom√≠nios:`);
console.log(`     - svlentes.com.br`);
console.log(`     - svlentes.shop`);
console.log(`     - localhost (para desenvolvimento)`);
console.log(`     - 127.0.0.1 (para desenvolvimento)`);

// 4. Diagn√≥stico do erro auth/network-request-failed
console.log('\nüîç Diagn√≥stico do erro auth/network-request-failed:');
console.log('Causas comuns e solu√ß√µes:');
console.log('');
console.log('1. DOM√çNIOS N√ÉO AUTORIZADOS:');
console.log('   ‚Ä¢ Acesse: https://console.firebase.google.com/project/svlentes/authentication/settings');
console.log(`   ‚Ä¢ Adicione: svlentes.com.br, svlentes.shop, localhost`);
console.log('');
console.log('2. CONFIGURA√á√ÉO DE REDE:');
console.log('   ‚Ä¢ Verifique conex√£o com a internet');
console.log('   ‚Ä¢ Firewall/proxy bloqueando requisi√ß√µes ao Google');
console.log('   ‚Ä¢ DNS configurado corretamente');
console.log('');
console.log('3. POPUPS BLOQUEADOS:');
console.log('   ‚Ä¢ Permita popups no navegador');
console.log('   ‚Ä¢ Desabilite bloqueadores de an√∫ncios');
console.log('');
console.log('4. CONFIGURA√á√ÉO HTTPS:');
console.log('   ‚Ä¢ Em produ√ß√£o, use HTTPS obrigatoriamente');
console.log('   ‚Ä¢ Firebase Auth n√£o funciona em HTTP com dom√≠nios personalizados');

// 5. Testar conectividade com APIs do Google
console.log('\nüåê Testando conectividade...');
const https = require('https');

const testUrls = [
  { name: 'Firebase Auth API', url: `https://identitytoolkit.googleapis.com/v1/projects/${firebaseConfig.projectId}` },
  { name: 'Google OAuth', url: 'https://accounts.google.com/.well-known/openid_configuration' },
  { name: 'Firebase Config', url: `https://firebase.googleapis.com/v1beta/projects/${firebaseConfig.projectId}` }
];

testUrls.forEach(({ name, url }) => {
  const req = https.request(url, { method: 'HEAD', timeout: 5000 }, (res) => {
    console.log(`‚úÖ ${name}: ${res.statusCode} - OK`);
  });

  req.on('error', (error) => {
    console.log(`‚ùå ${name}: ${error.message}`);
  });

  req.on('timeout', () => {
    console.log(`‚è∞ ${name}: Timeout`);
    req.destroy();
  });

  req.end();
});

console.log('\nüìù Pr√≥ximos passos:');
console.log('1. Verifique os dom√≠nios autorizados no Firebase Console');
console.log('2. Teste a autentica√ß√£o no navegador');
console.log('3. Verifique o console do navegador para erros detalhados');
console.log('4. Use ferramentas de desenvolvedor para inspecionar requisi√ß√µes de rede');