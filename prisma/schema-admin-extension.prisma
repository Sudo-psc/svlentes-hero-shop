// ==================== ADMINISTRATIVE SYSTEM EXTENSION ====================
// Extensão completa do schema para sistema administrativo robusto
// Mantém compatibilidade total com schema existente

// ==================== ADMINISTRATIVE ENUMS ====================

enum AdminRole {
  SUPER_ADMIN        // Acesso total ao sistema
  ADMIN              // Acesso administrativo completo
  MANAGER            // Gestão de usuários e suporte
  SUPPORT_AGENT      // Acesso apenas ao suporte
  FINANCIAL Analyst  // Acesso apenas a financeiro
  VIEWER             // Acesso somente leitura
}

enum AdminPermission {
  // User Management
  USER_CREATE
  USER_READ
  USER_UPDATE
  USER_DELETE
  USER_EXPORT

  // Subscription Management
  SUBSCRIPTION_CREATE
  SUBSCRIPTION_READ
  SUBSCRIPTION_UPDATE
  SUBSCRIPTION_DELETE
  SUBSCRIPTION_PAUSE
  SUBSCRIPTION_RESUME
  SUBSCRIPTION_CANCEL
  SUBSCRIPTION_EXPORT

  // Order Management
  ORDER_CREATE
  ORDER_READ
  ORDER_UPDATE
  ORDER_DELETE
  ORDER_TRACK
  ORDER_EXPORT

  // Payment Management
  PAYMENT_READ
  PAYMENT_REFUND
  PAYMENT_EXPORT
  PAYMENT_DISPUTE

  // Support Management
  SUPPORT_READ
  SUPPORT_ASSIGN
  SUPPORT_ESCALATE
  SUPPORT_RESOLVE
  SUPPORT_EXPORT

  // Financial Management
  FINANCIAL_READ
  FINANCIAL_REPORT
  FINANCIAL_REFUND
  FINANCIAL_EXPORT

  // System Management
  SYSTEM_CONFIG
  SYSTEM_LOGS
  SYSTEM_BACKUP
  SYSTEM_MAINTENANCE

  // Analytics
  ANALYTICS_READ
  ANALYTICS_EXPORT
  ANALYTICS_DASHBOARD
}

enum AdminSessionStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  SUSPENDED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
  CRITICAL
}

enum SystemEvent {
  USER_LOGIN
  USER_LOGOUT
  USER_CREATED
  USER_UPDATED
  USER_DELETED

  SUBSCRIPTION_CREATED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELLED
  SUBSCRIPTION_PAUSED
  SUBSCRIPTION_RESUMED

  PAYMENT_RECEIVED
  PAYMENT_FAILED
  PAYMENT_REFUNDED
  PAYMENT_DISPUTED

  ORDER_CREATED
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED

  SYSTEM_BACKUP
  SYSTEM_MAINTENANCE
  SYSTEM_ERROR
  SYSTEM_UPDATE

  SECURITY_ALERT
  DATA_BREACH
  UNAUTHORIZED_ACCESS
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
}

enum RefundReason {
  CUSTOMER_REQUEST
  SERVICE_NOT_PROVIDED
  DEFECTIVE_PRODUCT
  DELIVERY_ISSUE
  WRONG_ITEM
  DUPLICATE_PAYMENT
  PARTIAL_REFUND
  GOODWILL
  CHARGEBACK
  SYSTEM_ERROR
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  PENDING_CUSTOMER
  PENDING_AGENT
  RESOLVED
  CLOSED
  ESCALATED
}

enum TicketCategory {
  BILLING
  TECHNICAL
  PRODUCT
  DELIVERY
  ACCOUNT
  COMPLAINT
  COMPLIMENT
  EMERGENCY
  GENERAL
}

// ==================== ADMIN USER MODELS ====================

model AdminUser {
  id                    String             @id @default(cuid())

  // Authentication
  email                 String             @unique @db.VarChar(255)
  password              String             @db.VarChar(255)
  name                  String             @db.VarChar(255)

  // Role and Permissions
  role                  AdminRole          @default(VIEWER)
  permissions           AdminPermission[]  // Array de permissões específicas
  isActive              Boolean            @default(true)

  // Profile Information
  avatarUrl             String?            @map("avatar_url") @db.Text
  phone                 String?            @db.VarChar(20)
  department            String?            @db.VarChar(100)
  position              String?            @db.VarChar(100)

  // Security
  twoFactorEnabled      Boolean            @default(false) @map("two_factor_enabled")
  twoFactorSecret       String?            @map("two_factor_secret") @db.VarChar(255)
  lastPasswordChange    DateTime?          @map("last_password_change") @db.Timestamp(6)
  failedLoginAttempts   Int                @default(0) @map("failed_login_attempts")
  lockedUntil           DateTime?          @map("locked_until") @db.Timestamp(6)

  // Access Control
  ipWhitelist           String[]           @default([]) @map("ip_whitelist")
  allowedHours          Json?              @map("allowed_hours") @db.JsonB

  // Audit Fields
  createdBy             String?            @map("created_by")
  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)
  lastLoginAt           DateTime?          @map("last_login_at") @db.Timestamp(6)
  lastLoginIp           String?            @map("last_login_ip") @db.VarChar(45)

  // Relations
  sessions              AdminSession[]
  actions               AdminAction[]
  supportTickets        SupportTicket[]
  notifications         AdminNotification[]
  permissionChanges     PermissionHistory[]

  @@index([email], name: "idx_admin_users_email")
  @@index([role], name: "idx_admin_users_role")
  @@index([isActive], name: "idx_admin_users_active")
  @@index([createdAt], name: "idx_admin_users_created_at")
  @@map("admin_users")
}

model AdminSession {
  id                    String              @id @default(cuid())

  // Session Information
  adminUserId           String              @map("admin_user_id")
  sessionToken          String              @unique @map("session_token") @db.VarChar(255)
  refreshToken          String?             @map("refresh_token") @db.VarChar(255)

  // Status and Lifecycle
  status                AdminSessionStatus  @default(ACTIVE)
  ipAddress             String              @map("ip_address") @db.VarChar(45)
  userAgent             String              @map("user_agent") @db.Text
  deviceInfo            Json?               @map("device_info") @db.JsonB

  // Timing
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  lastActivityAt        DateTime            @default(now()) @map("last_activity_at") @db.Timestamp(6)
  expiresAt             DateTime            @map("expires_at") @db.Timestamp(6)
  terminatedAt          DateTime?           @map("terminated_at") @db.Timestamp(6)
  terminationReason     String?             @map("termination_reason") @db.Text

  // Security
  suspiciousActivity    Boolean             @default(false) @map("suspicious_activity")
  securityFlags         String[]            @default([]) @map("security_flags")

  // Relations
  adminUser             AdminUser           @relation(fields: [adminUserId], references: [id], onDelete: Cascade)

  @@index([adminUserId], name: "idx_admin_sessions_admin_user")
  @@index([sessionToken], name: "idx_admin_sessions_token")
  @@index([status], name: "idx_admin_sessions_status")
  @@index([expiresAt], name: "idx_admin_sessions_expires")
  @@index([lastActivityAt], name: "idx_admin_sessions_last_activity")
  @@map("admin_sessions")
}

model PermissionHistory {
  id                    String             @id @default(cuid())

  // Target
  adminUserId           String             @map("admin_user_id")

  // Change Information
  permissionAdded       AdminPermission?   @map("permission_added")
  permissionRemoved     AdminPermission?   @map("permission_removed")
  roleChangedFrom       AdminRole?         @map("role_changed_from")
  roleChangedTo         AdminRole?         @map("role_changed_to")

  // Audit
  changedBy             String             @map("changed_by")
  reason                String             @db.Text
  ipAddress             String             @map("ip_address") @db.VarChar(45)
  userAgent             String             @map("user_agent") @db.Text

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  adminUser             AdminUser          @relation(fields: [adminUserId], references: [id], onDelete: Cascade)

  @@index([adminUserId], name: "idx_permission_history_admin_user")
  @@index([changedBy], name: "idx_permission_history_changed_by")
  @@index([createdAt], name: "idx_permission_history_created_at")
  @@map("permission_history")
}

// ==================== EXTENDED USER MODEL ====================

// Extensão do modelo User com campos administrativos
// (Estes campos serão adicionados ao modelo User existente)
/*
Extensões ao modelo User existente:

 Campos administrativos a adicionar:
  - isManagedByAdmin     Boolean      @default(false) @map("is_managed_by_admin")
  - assignedAdminId      String?      @map("assigned_admin_id")
  - adminNotes           String?      @map("admin_notes") @db.Text
  - riskScore            Int?         @map("risk_score")
  - flaggedForReview     Boolean      @default(false) @map("flagged_for_review")
  - reviewReason         String?      @map("review_reason") @db.Text
  - accountStatus        String       @default("active") @map("account_status") @db.VarChar(50)
  - accountRestrictedAt  DateTime?    @map("account_restricted_at") @db.Timestamp(6)
  - accountRestrictedBy  String?      @map("account_restricted_by")
  - accountRestrictedUntil DateTime?  @map("account_restricted_until") @db.Timestamp(6)
  - lastReviewedAt       DateTime?    @map("last_reviewed_at") @db.Timestamp(6)
  - lastReviewedBy       String?      @map("last_reviewed_by")
  - verificationLevel    String       @default("basic") @map("verification_level") @db.VarChar(50)
  - verifiedAt           DateTime?    @map("verified_at") @db.Timestamp(6)
  - verifiedBy           String?      @map("verified_by")
  - metadata             Json?        @map("metadata") @db.JsonB

 Novas relações:
  - assignedAdmin        AdminUser?   @relation("AdminAssignedUsers", fields: [assignedAdminId], references: [id], onDelete: SetNull)
  - reviews              UserReview[]
  - restrictions         AccountRestriction[]
*/

model UserReview {
  id                    String             @id @default(cuid())

  // Target
  userId                String             @map("user_id")
  reviewedBy            String             @map("reviewed_by")

  // Review Details
  reviewType            String             @map("review_type") @db.VarChar(50) // 'manual', 'automated', 'complaint', etc.
  status                String             @map("status") @db.VarChar(50) // 'approved', 'rejected', 'pending'
  riskScore             Int?               @map("risk_score")
  notes                 String             @db.Text
  actionTaken           String?            @map("action_taken") @db.Text

  // Audit
  ipAddress             String             @map("ip_address") @db.VarChar(45)
  userAgent             String             @map("user_agent") @db.Text

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([userId], name: "idx_user_reviews_user")
  @@index([reviewedBy], name: "idx_user_reviews_reviewer")
  @@index([status], name: "idx_user_reviews_status")
  @@index([createdAt], name: "idx_user_reviews_created_at")
  @@map("user_reviews")
}

model AccountRestriction {
  id                    String             @id @default(cuid())

  // Target
  userId                String             @map("user_id")

  // Restriction Details
  restrictionType       String             @map("restriction_type") @db.VarChar(50) // 'payment', 'login', 'subscription', etc.
  reason                String             @db.Text
  isActive              Boolean            @default(true)

  // Timing
  restrictedAt          DateTime           @default(now()) @map("restricted_at") @db.Timestamp(6)
  restrictedBy          String             @map("restricted_by")
  expiresAt             DateTime?          @map("expires_at") @db.Timestamp(6)
  liftedAt              DateTime?          @map("lifted_at") @db.Timestamp(6)
  liftedBy              String?            @map("lifted_by")

  // Metadata
  metadata              Json?              @map("metadata") @db.JsonB

  @@index([userId], name: "idx_account_restrictions_user")
  @@index([isActive], name: "idx_account_restrictions_active")
  @@index([restrictionType], name: "idx_account_restrictions_type")
  @@index([expiresAt], name: "idx_account_restrictions_expires")
  @@map("account_restrictions")
}

// ==================== EXTENDED SUBSCRIPTION MODEL ====================

// Extensão do modelo Subscription com campos administrativos
/*
Extensões ao modelo Subscription existente:

 Campos administrativos a adicionar:
  - isManagedByAdmin     Boolean      @default(false) @map("is_managed_by_admin")
  - assignedAdminId      String?      @map("assigned_admin_id")
  - adminNotes           String?      @map("admin_notes") @db.Text
  - riskLevel            String       @default("low") @map("risk_level") @db.VarChar(50)
  - paymentAttempts      Int          @default(0) @map("payment_attempts")
  - lastPaymentAttempt   DateTime?    @map("last_payment_attempt") @db.Timestamp(6)
  - nextRetryAttempt     DateTime?    @map("next_retry_attempt") @db.Timestamp(6)
  - dunningLevel         Int          @default(0) @map("dunning_level")
  - gracePeriodEndsAt    DateTime?    @map("grace_period_ends_at") @db.Timestamp(6)
  - flaggedForReview     Boolean      @default(false) @map("flagged_for_review")
  - reviewReason         String?      @map("review_reason") @db.Text
  - lastReviewedAt       DateTime?    @map("last_reviewed_at") @db.Timestamp(6)
  - lastReviewedBy       String?      @map("last_reviewed_by")
  - customPricing        Boolean      @default(false) @map("custom_pricing")
  - pricingOverride      Json?        @map("pricing_override") @db.JsonB
  - approvedBy           String?      @map("approved_by")
  - approvedAt           DateTime?    @map("approved_at") @db.Timestamp(6)
  - metadata             Json?        @map("metadata") @db.JsonB

 Novas relações:
  - assignedAdmin        AdminUser?   @relation("AdminAssignedSubscriptions", fields: [assignedAdminId], references: [id], onDelete: SetNull)
  - reviews              SubscriptionReview[]
  - paymentRetries       PaymentRetry[]
  - manualAdjustments    ManualAdjustment[]
*/

model SubscriptionReview {
  id                    String             @id @default(cuid())

  // Target
  subscriptionId        String             @map("subscription_id")
  reviewedBy            String             @map("reviewed_by")

  // Review Details
  reviewType            String             @map("review_type") @db.VarChar(50)
  previousStatus        String?            @map("previous_status") @db.VarChar(50)
  newStatus             String?            @map("new_status") @db.VarChar(50)
  notes                 String             @db.Text
  actionRequired        Boolean            @default(false) @map("action_required")
  actionTaken           String?            @map("action_taken") @db.Text

  // Audit
  ipAddress             String             @map("ip_address") @db.VarChar(45)
  userAgent             String             @map("user_agent") @db.Text

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)

  @@index([subscriptionId], name: "idx_subscription_reviews_subscription")
  @@index([reviewedBy], name: "idx_subscription_reviews_reviewer")
  @@index([reviewType], name: "idx_subscription_reviews_type")
  @@map("subscription_reviews")
}

model PaymentRetry {
  id                    String             @id @default(cuid())

  // Target
  subscriptionId        String             @map("subscription_id")
  paymentId             String?            @map("payment_id")

  // Retry Details
  attemptNumber         Int                @map("attempt_number")
  retryReason           String             @map("retry_reason") @db.Text
  scheduledFor          DateTime           @map("scheduled_for") @db.Timestamp(6)
  attemptedAt           DateTime?          @map("attempted_at") @db.Timestamp(6)
  success               Boolean?           @map("success")
  failureReason         String?            @map("failure_reason") @db.Text

  // Automation
  isAutomated           Boolean            @default(true) @map("is_automated")
  triggeredBy           String?            @map("triggered_by") // system_rule, admin_action, etc.

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([subscriptionId], name: "idx_payment_retries_subscription")
  @@index([scheduledFor], name: "idx_payment_retries_scheduled")
  @@index([success], name: "idx_payment_retries_success")
  @@map("payment_retries")
}

model ManualAdjustment {
  id                    String             @id @default(cuid())

  // Target
  subscriptionId        String             @map("subscription_id")

  // Adjustment Details
  adjustmentType        String             @map("adjustment_type") @db.VarChar(50) // 'discount', 'credit', 'charge', etc.
  amount                Decimal            @db.Decimal(10, 2)
  reason                String             @db.Text
  description           String?            @map("description") @db.Text

  // Timing
  effectiveFrom         DateTime           @map("effective_from") @db.Date
  effectiveTo           DateTime?          @map("effective_to") @db.Date

  // Audit
  createdBy             String             @map("created_by")
  approvedBy            String?            @map("approved_by")
  ipAddress             String             @map("ip_address") @db.VarChar(45)

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([subscriptionId], name: "idx_manual_adjustments_subscription")
  @@index([adjustmentType], name: "idx_manual_adjustments_type")
  @@index([createdBy], name: "idx_manual_adjustments_creator")
  @@map("manual_adjustments")
}

// ==================== EXTENDED ORDER MODEL ====================

// Extensão do modelo Order com campos administrativos
/*
Extensões ao modelo Order existente:

 Campos administrativos a adicionar:
  - isManagedByAdmin     Boolean      @default(false) @map("is_managed_by_admin")
  - assignedAdminId      String?      @map("assigned_admin_id")
  - adminNotes           String?      @map("admin_notes") @db.Text
  - priority             String       @default("normal") @map("priority") @db.VarChar(50)
  - flaggedForReview     Boolean      @default(false) @map("flagged_for_review")
  - reviewReason         String?      @map("review_reason") @db.Text
  - lastReviewedAt       DateTime?    @map("last_reviewed_at") @db.Timestamp(6)
  - lastReviewedBy       String?      @map("last_reviewed_by")
  - warehouseProcessedAt DateTime?    @map("warehouse_processed_at") @db.Timestamp(6)
  - processedBy          String?      @map("processed_by")
  - qualityChecked       Boolean      @default(false) @map("quality_checked")
  - qualityCheckedBy     String?      @map("quality_checked_by")
  - qualityCheckedAt     DateTime?    @map("quality_checked_at") @db.Timestamp(6)
  - specialInstructions  String?      @map("special_instructions") @db.Text
  - giftWrap             Boolean      @default(false) @map("gift_wrap")
  - giftMessage          String?      @map("gift_message") @db.Text
  - insuranceValue       Decimal?     @map("insurance_value") @db.Decimal(10, 2)
  - metadata             Json?        @map("metadata") @db.JsonB

 Novas relações:
  - assignedAdmin        AdminUser?   @relation("AdminAssignedOrders", fields: [assignedAdminId], references: [id], onDelete: SetNull)
  - reviews              OrderReview[]
  - exceptions           OrderException[]
*/

model OrderReview {
  id                    String             @id @default(cuid())

  // Target
  orderId               String             @map("order_id")
  reviewedBy            String             @map("reviewed_by")

  // Review Details
  reviewType            String             @map("review_type") @db.VarChar(50)
  previousStatus        String?            @map("previous_status") @db.VarChar(50)
  newStatus             String?            @map("new_status") @db.VarChar(50)
  notes                 String             @db.Text
  actionRequired        Boolean            @default(false) @map("action_required")
  actionTaken           String?            @map("action_taken") @db.Text

  // Audit
  ipAddress             String             @map("ip_address") @db.VarChar(45)
  userAgent             String             @map("user_agent") @db.Text

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)

  @@index([orderId], name: "idx_order_reviews_order")
  @@index([reviewedBy], name: "idx_order_reviews_reviewer")
  @@index([reviewType], name: "idx_order_reviews_type")
  @@map("order_reviews")
}

model OrderException {
  id                    String             @id @default(cuid())

  // Target
  orderId               String             @map("order_id")

  // Exception Details
  exceptionType         String             @map("exception_type") @db.VarChar(50)
  severity              String             @map("severity") @db.VarChar(50) // 'low', 'medium', 'high', 'critical'
  description           String             @db.Text
  resolution            String?            @map("resolution") @db.Text
  status                String             @default("open") @map("status") @db.VarChar(50)

  // Assignment
  assignedTo            String?            @map("assigned_to")
  resolvedBy            String?            @map("resolved_by")

  // Timing
  detectedAt            DateTime           @default(now()) @map("detected_at") @db.Timestamp(6)
  resolvedAt            DateTime?          @map("resolved_at") @db.Timestamp(6)

  // Impact
  financialImpact       Decimal?           @map("financial_impact") @db.Decimal(10, 2)
  customerImpact        String?            @map("customer_impact") @db.Text

  // Communication
  customerNotified      Boolean            @default(false) @map("customer_notified")
  internalNotification  Boolean            @default(false) @map("internal_notification")

  @@index([orderId], name: "idx_order_exceptions_order")
  @@index([status], name: "idx_order_exceptions_status")
  @@index([severity], name: "idx_order_exceptions_severity")
  @@index([assignedTo], name: "idx_order_exceptions_assigned")
  @@map("order_exceptions")
}

// ==================== ENHANCED SUPPORT SYSTEM ====================

// Atualização do modelo SupportTicket existente com novos campos
/*
Extensões ao modelo SupportTicket existente:

 Campos adicionais para incluir:
  - assignedAdminId      String?      @map("assigned_admin_id")
  - internalPriority     String       @default("medium") @map("internal_priority") @db.VarChar(50)
  - escalationLevel      Int          @default(0) @map("escalation_level")
  - slaBreachAt          DateTime?    @map("sla_breach_at") @db.Timestamp(6)
  - firstResponseAt      DateTime?    @map("first_response_at") @db.Timestamp(6)
  - resolutionTime       Int?         @map("resolution_time") // em minutos
  - customerSatisfaction Int?         @map("customer_satisfaction") // 1-5
  - sentimentScore       Float?       @map("sentiment_score") // -1 to 1
  - internalNotes        String?      @map("internal_notes") @db.Text
  - tags                 String[]     @default([])
  - source               String       @default("whatsapp") @map("source") @db.VarChar(50)
  - channel              String       @default("whatsapp") @map("channel") @db.VarChar(50)
  - metadata             Json?        @map("metadata") @db.JsonB

 Novas relações:
  - assignedAdmin        AdminUser?   @relation("AdminAssignedTickets", fields: [assignedAdminId], references: [id], onDelete: SetNull)
  - messages             TicketMessage[]
  - escalations          TicketEscalation[]
  - resolutions          TicketResolution[]
  - satisfactionReviews  SatisfactionReview[]
*/

model TicketMessage {
  id                    String             @id @default(cuid())

  // Target
  ticketId              String             @map("ticket_id")

  // Message Details
  senderType            String             @map("sender_type") @db.VarChar(50) // 'customer', 'agent', 'system', 'bot'
  senderId              String?            @map("sender_id")
  senderName            String?            @map("sender_name") @db.VarChar(255)
  content               String             @db.Text
  messageType           String             @map("message_type") @db.VarChar(50) // 'text', 'image', 'file', 'system'

  // Internal Communication
  isInternal            Boolean            @default(false) @map("is_internal")
  internalRecipients    String[]           @default([]) @map("internal_recipients")

  // Media Attachments
  attachments           Json?              @map("attachments") @db.JsonB

  // Automation
  isAutomated           Boolean            @default(false) @map("is_automated")
  templateId            String?            @map("template_id")

  // Metadata
  metadata              Json?              @map("metadata") @db.JsonB

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([ticketId], name: "idx_ticket_messages_ticket")
  @@index([senderType], name: "idx_ticket_messages_sender_type")
  @@index([createdAt], name: "idx_ticket_messages_created_at")
  @@index([isInternal], name: "idx_ticket_messages_internal")
  @@map("ticket_messages")
}

model TicketEscalation {
  id                    String             @id @default(cuid())

  // Target
  ticketId              String             @map("ticket_id")

  // Escalation Details
  fromLevel             Int                @map("from_level")
  toLevel               Int                @map("to_level")
  reason                String             @db.Text
  urgency               String             @map("urgency") @db.VarChar(50)

  // Assignment
  escalatedBy           String             @map("escalated_by")
  escalatedTo           String?            @map("escalated_to")
  previousAssignee      String?            @map("previous_assignee")

  // Timing
  escalatedAt           DateTime           @default(now()) @map("escalated_at") @db.Timestamp(6)
  acceptedAt            DateTime?          @map("accepted_at") @db.Timestamp(6)
  resolvedAt            DateTime?          @map("resolved_at") @db.Timestamp(6)

  // Resolution
  resolution            String?            @map("resolution") @db.Text
  resolutionBy          String?            @map("resolution_by")

  // SLA Impact
  slaPausedAt           DateTime?          @map("sla_paused_at") @db.Timestamp(6)
  slaResumedAt          DateTime?          @map("sla_resumed_at") @db.Timestamp(6)

  @@index([ticketId], name: "idx_ticket_escalations_ticket")
  @@index([escalatedBy], name: "idx_ticket_escalations_escalated_by")
  @@index([toLevel], name: "idx_ticket_escalations_to_level")
  @@map("ticket_escalations")
}

model TicketResolution {
  id                    String             @id @default(cuid())

  // Target
  ticketId              String             @map("ticket_id")

  // Resolution Details
  resolutionType        String             @map("resolution_type") @db.VarChar(50)
  resolutionCategory    String             @map("resolution_category") @db.VarChar(50)
  solution              String             @db.Text
  summary               String             @db.Text

  // Classification
  customerSatisfaction  Int?               @map("customer_satisfaction") // 1-5
  agentEffort           Int?               @map("agent_effort") // 1-5
  complexity            String?            @map("complexity") @db.VarChar(50)

  // Time Tracking
  totalHandleTime       Int?               @map("total_handle_time") // em minutos
  firstResponseTime     Int?               @map("first_response_time") // em minutos
  resolutionTime        Int?               @map("resolution_time") // em minutos

  // Assignment
  resolvedBy            String             @map("resolved_by")
  approvedBy            String?            @map("approved_by")

  // Follow-up
  followUpRequired      Boolean            @default(false) @map("follow_up_required")
  followUpDate          DateTime?          @map("follow_up_date") @db.Timestamp(6)
  followUpNotes         String?            @map("follow_up_notes") @db.Text

  // Knowledge Base
  addToKnowledgeBase    Boolean            @default(false) @map("add_to_knowledge_base")
  knowledgeBaseEntry    String?            @map("knowledge_base_entry")

  resolvedAt            DateTime           @default(now()) @map("resolved_at") @db.Timestamp(6)
  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)

  @@index([ticketId], name: "idx_ticket_resolutions_ticket")
  @@index([resolvedBy], name: "idx_ticket_resolutions_resolved_by")
  @@index([resolutionType], name: "idx_ticket_resolutions_type")
  @@map("ticket_resolutions")
}

model SatisfactionReview {
  id                    String             @id @default(cuid())

  // Target
  ticketId              String             @map("ticket_id")

  // Review Details
  rating                Int                // 1-5 stars
  comment               String?            @db.Text
  categories            Json?              @map("categories") @db.JsonB // scores for different aspects

  // Response Timing
  responseTimeRating    Int?               @map("response_time_rating") // 1-5
  solutionQualityRating Int?               @map("solution_quality_rating") // 1-5
  agentRating           Int?               @map("agent_rating") // 1-5

  // Customer Info
  customerId            String?            @map("customer_id")
  customerEmail         String?            @map("customer_email") @db.VarChar(255)

  // Request Details
  requestedAt           DateTime           @default(now()) @map("requested_at") @db.Timestamp(6)
  respondedAt           DateTime?          @map("responded_at") @db.Timestamp(6)
  isAnonymous           Boolean            @default(false) @map("is_anonymous")

  // Follow-up
  followUpContact       Boolean            @default(false) @map("follow_up_contact")
  followUpCompleted     Boolean            @default(false) @map("follow_up_completed")

  @@index([ticketId], name: "idx_satisfaction_reviews_ticket")
  @@index([rating], name: "idx_satisfaction_reviews_rating")
  @@index([requestedAt], name: "idx_satisfaction_reviews_requested")
  @@map("satisfaction_reviews")
}

// ==================== FINANCIAL ADMINISTRATIVE SYSTEM ====================

model FinancialTransaction {
  id                    String             @id @default(cuid())

  // References
  userId                String             @map("user_id")
  subscriptionId        String?            @map("subscription_id")
  paymentId             String?            @map("payment_id")
  invoiceId             String?            @map("invoice_id")
  orderId               String?            @map("order_id")
  refundId              String?            @map("refund_id")

  // Transaction Details
  transactionType       String             @map("transaction_type") @db.VarChar(50) // 'payment', 'refund', 'adjustment', 'fee', etc.
  category              String             @map("category") @db.VarChar(50) // 'subscription', 'product', 'service', 'penalty', etc.
  amount                Decimal            @db.Decimal(10, 2)
  currency              String             @default("BRL") @db.VarChar(3)

  // Status
  status                String             @map("status") @db.VarChar(50)
  gateway               String             @map("gateway") @db.VarChar(50) // 'asaas', 'stripe', 'manual', etc.
  gatewayTransactionId  String?            @map("gateway_transaction_id") @db.VarChar(255)

  // Breakdown
  grossAmount           Decimal            @map("gross_amount") @db.Decimal(10, 2)
  fees                  Decimal            @default(0) @db.Decimal(10, 2)
  taxes                 Decimal            @default(0) @db.Decimal(10, 2)
  netAmount             Decimal            @db.Decimal(10, 2)

  // Dates
  transactionDate       DateTime           @map("transaction_date") @db.Date
  processedAt           DateTime?          @map("processed_at") @db.Timestamp(6)
  settledAt             DateTime?          @map("settled_at") @db.Timestamp(6)

  // Reconciliation
  reconciled            Boolean            @default(false)
  reconciledAt          DateTime?          @map("reconciled_at") @db.Timestamp(6)
  reconciledBy          String?            @map("reconciled_by")

  // Admin Actions
  manualReview          Boolean            @default(false) @map("manual_review")
  reviewedBy            String?            @map("reviewed_by")
  reviewedAt            DateTime?          @map("reviewed_at") @db.Timestamp(6)
  reviewNotes           String?            @map("review_notes") @db.Text

  // Description and Metadata
  description           String             @db.Text
  metadata              Json?              @map("metadata") @db.JsonB

  // Audit
  createdBy             String?            @map("created_by")
  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([userId], name: "idx_financial_transactions_user")
  @@index([subscriptionId], name: "idx_financial_transactions_subscription")
  @@index([paymentId], name: "idx_financial_transactions_payment")
  @@index([transactionType], name: "idx_financial_transactions_type")
  @@index([status], name: "idx_financial_transactions_status")
  @@index([transactionDate], name: "idx_financial_transactions_date")
  @@index([gateway], name: "idx_financial_transactions_gateway")
  @@index([reconciled], name: "idx_financial_transactions_reconciled")
  @@map("financial_transactions")
}

model Refund {
  id                    String             @id @default(cuid())

  // References
  userId                String             @map("user_id")
  subscriptionId        String?            @map("subscription_id")
  paymentId             String             @map("payment_id")
  orderId               String?            @map("order_id")
  financialTransactionId String?           @map("financial_transaction_id")

  // Refund Details
  refundAmount          Decimal            @db.Decimal(10, 2)
  originalAmount        Decimal            @map("original_amount") @db.Decimal(10, 2)
  reason                RefundReason
  status                RefundStatus       @default(PENDING)

  // Processing
  processedBy           String?            @map("processed_by")
  approvedBy            String?            @map("approved_by")
  rejectedBy            String?            @map("rejected_by")

  // Gateway Information
  gateway               String             @map("gateway") @db.VarChar(50)
  gatewayRefundId       String?            @map("gateway_refund_id") @db.VarChar(255)
  gatewayStatus         String?            @map("gateway_status") @db.VarChar(100)

  // Timing
  requestedAt           DateTime           @default(now()) @map("requested_at") @db.Timestamp(6)
  processedAt           DateTime?          @map("processed_at") @db.Timestamp(6)
  approvedAt            DateTime?          @map("approved_at") @db.Timestamp(6)
  rejectedAt            DateTime?          @map("rejected_at") @db.Timestamp(6)
  completedAt           DateTime?          @map("completed_at") @db.Timestamp(6)
  expectedCompletion    DateTime?          @map("expected_completion") @db.Timestamp(6)

  // Fees and Deductions
  processingFee         Decimal            @default(0) @db.Decimal(10, 2) @map("processing_fee")
  refundableAmount      Decimal            @db.Decimal(10, 2) @map("refundable_amount")

  // Communication
  customerNotified      Boolean            @default(false) @map("customer_notified")
  notificationSentAt    DateTime?          @map("notification_sent_at") @db.Timestamp(6)

  // Documentation
  reasonDetails         String?            @map("reason_details") @db.Text
  adminNotes            String?            @map("admin_notes") @db.Text
  evidenceAttachments   Json?              @map("evidence_attachments") @db.JsonB

  // Audit
  ipAddress             String             @map("ip_address") @db.VarChar(45)
  userAgent             String             @map("user_agent") @db.Text

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([userId], name: "idx_refunds_user")
  @@index([paymentId], name: "idx_refunds_payment")
  @@index([status], name: "idx_refunds_status")
  @@index([reason], name: "idx_refunds_reason")
  @@index([requestedAt], name: "idx_refunds_requested")
  @@index([processedBy], name: "idx_refunds_processor")
  @@map("refunds")
}

model Dispute {
  id                    String             @id @default(cuid())

  // References
  userId                String             @map("user_id")
  paymentId             String             @map("payment_id")
  refundId              String?            @map("refund_id")

  // Dispute Details
  disputeType           String             @map("dispute_type") @db.VarChar(50) // 'chargeback', 'inquiry', 'fraud'
  reason                String             @db.Text
  amount                Decimal            @db.Decimal(10, 2)
  currency              String             @default("BRL") @db.VarChar(3)

  // Status
  status                String             @map("status") @db.VarChar(50) // 'open', 'under_review', 'won', 'lost', 'settled'
  phase                 String             @map("phase") @db.VarChar(50) // 'initial', 'evidence', 'arbitration', etc.

  // Gateway Information
  gateway               String             @map("gateway") @db.VarChar(50)
  gatewayDisputeId      String?            @map("gateway_dispute_id") @db.VarChar(255)

  // Deadlines
  responseDue           DateTime?          @map("response_due") @db.Timestamp(6)
  evidenceDue           DateTime?          @map("evidence_due") @db.Timestamp(6)
  resolutionExpected    DateTime?          @map("resolution_expected") @db.Timestamp(6)

  // Assignment
  assignedTo            String?            @map("assigned_to")
  caseManager           String?            @map("case_manager")

  // Financial Impact
  provisionalCredit     Decimal?           @map("provisional_credit") @db.Decimal(10, 2)
  fees                  Decimal            @default(0) @db.Decimal(10, 2)

  // Evidence
  evidenceSubmitted     Boolean            @default(false) @map("evidence_submitted")
  evidenceFiles         Json?              @map("evidence_files") @db.JsonB
  customerEvidence      Json?              @map("customer_evidence") @db.JsonB

  // Communication
  customerContacted     Boolean            @default(false) @map("customer_contacted")
  lastContactAt         DateTime?          @map("last_contact_at") @db.Timestamp(6)

  // Resolution
  outcome               String?            @map("outcome") @db.VarChar(50)
  resolutionReason      String?            @map("resolution_reason") @db.Text
  resolvedAt            DateTime?          @map("resolved_at") @db.Timestamp(6)
  resolvedBy            String?            @map("resolved_by")

  // Notes
  adminNotes            String?            @map("admin_notes") @db.Text
  legalNotes            String?            @map("legal_notes") @db.Text

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([userId], name: "idx_disputes_user")
  @@index([paymentId], name: "idx_disputes_payment")
  @@index([status], name: "idx_disputes_status")
  @@index([disputeType], name: "idx_disputes_type")
  @@index([assignedTo], name: "idx_disputes_assigned")
  @@map("disputes")
}

// ==================== AUDIT AND LOGGING SYSTEM ====================

model AdminAction {
  id                    String             @id @default(cuid())

  // Admin Information
  adminUserId           String             @map("admin_user_id")
  adminEmail            String             @map("admin_email") @db.VarChar(255)

  // Action Details
  action                String             @map("action") @db.VarChar(255)
  resourceType          String             @map("resource_type") @db.VarChar(100) // 'user', 'subscription', 'payment', etc.
  resourceId            String?            @map("resource_id")
  resourceName          String?            @map("resource_name") @db.VarChar(255)

  // Change Details
  actionType            String             @map("action_type") @db.VarChar(50) // 'create', 'update', 'delete', 'view'
  oldValue              Json?              @map("old_value") @db.JsonB
  newValue              Json?              @map("new_value") @db.JsonB
  changedFields         String[]           @default([]) @map("changed_fields")

  // Context
  description           String?            @db.Text
  reason                String?            @db.Text
  source                String             @map("source") @db.VarChar(50) // 'dashboard', 'api', 'mobile', etc.

  // Session Information
  sessionId             String?            @map("session_id")

  // Request Details
  ipAddress             String             @map("ip_address") @db.VarChar(45)
  userAgent             String             @map("user_agent") @db.Text
  requestId             String?            @map("request_id")
  endpoint              String?            @map("endpoint") @db.Text

  // Timing
  duration              Int?               // em milissegundos
  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)

  // Security
  suspiciousActivity    Boolean            @default(false) @map("suspicious_activity")
  riskScore             Int?               @map("risk_score") // 0-100
  securityFlags         String[]           @default([]) @map("security_flags")

  // Additional Metadata
  metadata              Json?              @map("metadata") @db.JsonB

  @@index([adminUserId], name: "idx_admin_actions_admin_user")
  @@index([action], name: "idx_admin_actions_action")
  @@index([resourceType], name: "idx_admin_actions_resource_type")
  @@index([resourceId], name: "idx_admin_actions_resource_id")
  @@index([actionType], name: "idx_admin_actions_type")
  @@index([createdAt], name: "idx_admin_actions_created_at")
  @@index([ipAddress], name: "idx_admin_actions_ip")
  @@index([suspiciousActivity], name: "idx_admin_actions_suspicious")
  @@map("admin_actions")
}

model SystemLog {
  id                    String             @id @default(cuid())

  // Log Details
  level                 LogLevel
  event                 SystemEvent
  message               String             @db.Text

  // Context
  context               Json?              @map("context") @db.JsonB
  component             String             @map("component") @db.VarChar(100)
  service               String?            @map("service") @db.VarChar(100)
  version               String?            @map("version") @db.VarChar(50)

  // Resource Information
  resourceType          String?            @map("resource_type") @db.VarChar(100)
  resourceId            String?            @map("resource_id")
  userId                String?            @map("user_id")
  adminUserId           String?            @map("admin_user_id")

  // Request Information
  requestId             String?            @map("request_id")
  sessionId             String?            @map("session_id")
  traceId               String?            @map("trace_id")
  correlationId         String?            @map("correlation_id")

  // Network Information
  ipAddress             String?            @map("ip_address") @db.VarChar(45)
  userAgent             String?            @map("user_agent") @db.Text
  endpoint              String?            @map("endpoint") @db.Text
  method                String?            @map("method") @db.VarChar(10)

  // Error Information
  errorCode             String?            @map("error_code") @db.VarChar(100)
  errorMessage          String?            @map("error_message") @db.Text
  stackTrace            String?            @map("stack_trace") @db.Text

  // Performance
  duration              Int?               // em milissegundos
  memoryUsage           BigInt?            @map("memory_usage")
  cpuUsage              Float?             @map("cpu_usage")

  // Environment
  environment           String             @map("environment") @db.VarChar(50)
  region                String?            @map("region") @db.VarChar(50)
  instanceId            String?            @map("instance_id")

  // Alerting
  alertTriggered        Boolean            @default(false) @map("alert_triggered")
  alertSent             Boolean            @default(false) @map("alert_sent")
  alertLevel            String?            @map("alert_level") @db.VarChar(50)

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)

  @@index([level], name: "idx_system_logs_level")
  @@index([event], name: "idx_system_logs_event")
  @@index([component], name: "idx_system_logs_component")
  @@index([resourceType], name: "idx_system_logs_resource_type")
  @@index([userId], name: "idx_system_logs_user")
  @@index([adminUserId], name: "idx_system_logs_admin")
  @@index([createdAt], name: "idx_system_logs_created_at")
  @@index([alertTriggered], name: "idx_system_logs_alert")
  @@map("system_logs")
}

model SecurityEvent {
  id                    String             @id @default(cuid())

  // Event Details
  eventType             String             @map("event_type") @db.VarChar(100)
  severity              String             @map("severity") @db.VarChar(50) // 'low', 'medium', 'high', 'critical'
  title                 String             @db.VarChar(255)
  description           String             @db.Text

  // Target
  targetType            String             @map("target_type") @db.VarChar(100) // 'user', 'admin', 'system', etc.
  targetId              String?            @map("target_id")
  targetEmail           String?            @map("target_email") @db.VarChar(255)

  // Source
  sourceIp              String             @map("source_ip") @db.VarChar(45)
  sourceUserAgent       String?            @map("source_user_agent") @db.Text
  sourceLocation        Json?              @map("source_location") @db.JsonB

  // User/Admin Context
  userId                String?            @map("user_id")
  adminUserId           String?            @map("admin_user_id")

  // Status
  status                String             @map("status") @db.VarChar(50) // 'detected', 'investigating', 'resolved', 'false_positive'
  confidence            Float?             @map("confidence") // 0-1

  // Risk Assessment
  riskScore             Int?               @map("risk_score") // 0-100
  riskLevel             String?            @map("risk_level") @db.VarChar(50)
  impact                String?            @map("impact") @db.Text

  // Response
  actionTaken           String?            @map("action_taken") @db.Text
  automatedResponse     Boolean            @default(false) @map("automated_response")
  blocked               Boolean            @default(false)

  // Investigation
  assignedTo            String?            @map("assigned_to")
  investigationNotes    String?            @map("investigation_notes") @db.Text
  resolvedAt            DateTime?          @map("resolved_at") @db.Timestamp(6)
  resolvedBy            String?            @map("resolved_by")

  // Correlation
  relatedEvents         String[]           @default([]) @map("related_events")
  parentEventId         String?            @map("parent_event_id")

  // Metadata
  metadata              Json?              @map("metadata") @db.JsonB
  rawEvent             Json?              @map("raw_event") @db.JsonB

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([eventType], name: "idx_security_events_type")
  @@index([severity], name: "idx_security_events_severity")
  @@index([status], name: "idx_security_events_status")
  @@index([targetType], name: "idx_security_events_target_type")
  @@index([userId], name: "idx_security_events_user")
  @@index([adminUserId], name: "idx_security_events_admin")
  @@index([sourceIp], name: "idx_security_events_source_ip")
  @@index([createdAt], name: "idx_security_events_created_at")
  @@index([riskScore], name: "idx_security_events_risk")
  @@map("security_events")
}

// ==================== NOTIFICATION SYSTEM FOR ADMINS ====================

model AdminNotification {
  id                    String             @id @default(cuid())

  // Target
  adminUserId           String             @map("admin_user_id")

  // Notification Details
  type                  String             @map("type") @db.VarChar(100)
  title                 String             @db.VarChar(255)
  message               String             @db.Text
  priority              String             @map("priority") @db.VarChar(50) // 'low', 'medium', 'high', 'urgent'

  // Status
  isRead                Boolean            @default(false) @map("is_read")
  readAt                DateTime?          @map("read_at") @db.Timestamp(6)

  // Action
  actionUrl             String?            @map("action_url") @db.Text
  actionText            String?            @map("action_text") @db.VarChar(100)
  actionRequired        Boolean            @default(false) @map("action_required")
  actionCompleted       Boolean            @default(false) @map("action_completed")

  // Context
  context               Json?              @map("context") @db.JsonB
  resourceType          String?            @map("resource_type") @db.VarChar(100)
  resourceId            String?            @map("resource_id")

  // Delivery
  channels              String[]           @default([]) // ['dashboard', 'email', 'sms', 'push']
  sentVia               String[]           @default([]) @map("sent_via")

  // Scheduling
  scheduledAt           DateTime?          @map("scheduled_at") @db.Timestamp(6)
  expiresAt             DateTime?          @map("expires_at") @db.Timestamp(6)

  // Metadata
  metadata              Json?              @map("metadata") @db.JsonB

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([adminUserId], name: "idx_admin_notifications_admin_user")
  @@index([isRead], name: "idx_admin_notifications_read")
  @@index([type], name: "idx_admin_notifications_type")
  @@index([priority], name: "idx_admin_notifications_priority")
  @@index([createdAt], name: "idx_admin_notifications_created_at")
  @@map("admin_notifications")
}

// ==================== ANALYTICS AND PERFORMANCE ====================

model AnalyticsCache {
  id                    String             @id @default(cuid())

  // Cache Key
  cacheKey              String             @unique @map("cache_key") @db.VarChar(255)

  // Data
  data                  Json               @db.JsonB
  dataType              String             @map("data_type") @db.VarChar(100)

  // Metadata
  parameters            Json?              @map("parameters") @db.JsonB
  version               Int                @default(1)

  // Timing
  generatedAt           DateTime           @default(now()) @map("generated_at") @db.Timestamp(6)
  expiresAt             DateTime           @map("expires_at") @db.Timestamp(6)
  lastAccessedAt        DateTime?          @map("last_accessed_at") @db.Timestamp(6)

  // Usage
  accessCount           Int                @default(0) @map("access_count")
  sizeBytes             Int?               @map("size_bytes")

  // Status
  isActive              Boolean            @default(true) @map("is_active")
  isValid               Boolean            @default(true) @map("is_valid")

  // Generation Info
  generatedBy           String?            @map("generated_by")
  generationTime        Int?               @map("generation_time") // em milissegundos
  query                 String?            @db.Text

  @@index([cacheKey], name: "idx_analytics_cache_key")
  @@index([dataType], name: "idx_analytics_cache_type")
  @@index([expiresAt], name: "idx_analytics_cache_expires")
  @@index([isActive], name: "idx_analytics_cache_active")
  @@map("analytics_cache")
}

model DashboardConfig {
  id                    String             @id @default(cuid())

  // Owner
  adminUserId           String             @map("admin_user_id")

  // Configuration
  name                  String             @db.VarChar(255)
  description           String?            @db.Text
  layout                Json               @db.JsonB // dashboard layout configuration

  // Widgets
  widgets               Json               @db.JsonB // widget configurations

  // Filters and Parameters
  defaultFilters        Json?              @map("default_filters") @db.JsonB
  dateRange             Json?              @map("date_range") @db.JsonB

  // Sharing
  isPublic              Boolean            @default(false) @map("is_public")
  sharedWith            String[]           @default([]) @map("shared_with") // admin user IDs

  // Status
  isActive              Boolean            @default(true) @map("is_active")

  // Metadata
  version               Int                @default(1)
  tags                  String[]           @default([])

  // Audit
  createdBy             String             @map("created_by")
  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)
  lastAccessedAt        DateTime?          @map("last_accessed_at") @db.Timestamp(6)

  @@index([adminUserId], name: "idx_dashboard_configs_admin_user")
  @@index([isActive], name: "idx_dashboard_configs_active")
  @@index([isPublic], name: "idx_dashboard_configs_public")
  @@map("dashboard_configs")
}

model ReportSchedule {
  id                    String             @id @default(cuid())

  // Report Details
  name                  String             @db.VarChar(255)
  description           String?            @db.Text
  reportType            String             @map("report_type") @db.VarChar(100)

  // Schedule
  frequency             String             @map("frequency") @db.VarChar(50) // 'daily', 'weekly', 'monthly'
  cronExpression        String?            @map("cron_expression") @db.VarChar(100)
  timezone              String             @default("America/Sao_Paulo") @db.VarChar(50)
  nextRunAt             DateTime           @map("next_run_at") @db.Timestamp(6)
  lastRunAt             DateTime?          @map("last_run_at") @db.Timestamp(6)

  // Parameters
  parameters            Json?              @map("parameters") @db.JsonB
  filters               Json?              @map("filters") @db.JsonB

  // Delivery
  deliveryMethod        String             @map("delivery_method") @db.VarChar(50) // 'email', 'dashboard', 'api'
  recipients            String[]           @default([]) // email addresses or admin IDs
  format                String             @default("pdf") @db.VarChar(20) // 'pdf', 'excel', 'csv'

  // Status
  isActive              Boolean            @default(true) @map("is_active")
  status                String             @map("status") @db.VarChar(50) // 'scheduled', 'running', 'completed', 'failed'

  // Owner
  createdBy             String             @map("created_by")

  // Execution History
  lastSuccessAt         DateTime?          @map("last_success_at") @db.Timestamp(6)
  lastFailureAt         DateTime?          @map("last_failure_at") @db.Timestamp(6)
  failureReason         String?            @map("failure_reason") @db.Text
  consecutiveFailures   Int                @default(0) @map("consecutive_failures")

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([reportType], name: "idx_report_schedules_type")
  @@index([frequency], name: "idx_report_schedules_frequency")
  @@index([nextRunAt], name: "idx_report_schedules_next_run")
  @@index([isActive], name: "idx_report_schedules_active")
  @@index([status], name: "idx_report_schedules_status")
  @@map("report_schedules")
}

model SystemHealth {
  id                    String             @id @default(cuid())

  // Service Information
  serviceName           String             @map("service_name") @db.VarChar(100)
  component             String             @map("component") @db.VarChar(100)
  environment           String             @map("environment") @db.VarChar(50)

  // Health Status
  status                String             @map("status") @db.VarChar(50) // 'healthy', 'degraded', 'unhealthy', 'unknown'
  healthScore           Float?             @map("health_score") // 0-100

  // Metrics
  responseTime          Float?             @map("response_time") // em milissegundos
  cpuUsage              Float?             @map("cpu_usage") // percentagem
  memoryUsage           Float?             @map("memory_usage") // percentagem
  diskUsage             Float?             @map("disk_usage") // percentagem

  // Error Tracking
  errorRate             Float?             @map("error_rate") // percentagem
  lastErrorAt           DateTime?          @map("last_error_at") @db.Timestamp(6)
  lastErrorMessage      String?            @map("last_error_message") @db.Text

  // Dependencies
  dependencies          Json?              @map("dependencies") @db.JsonB
  externalServices      Json?              @map("external_services") @db.JsonB

  // Configuration
  version               String?            @map("version") @db.VarChar(50)
  buildNumber           String?            @map("build_number") @db.VarChar(50)
  deploymentTime        DateTime?          @map("deployment_time") @db.Timestamp(6)

  // Monitoring
  uptime                Int?               @map("uptime") // em segundos
  restartCount          Int                @default(0) @map("restart_count")

  // Additional Data
  metrics               Json?              @map("metrics") @db.JsonB
  metadata              Json?              @map("metadata") @db.JsonB

  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  @@unique([serviceName, component, environment])
  @@index([status], name: "idx_system_health_status")
  @@index([serviceName], name: "idx_system_health_service")
  @@index([createdAt], name: "idx_system_health_created_at")
  @@map("system_health")
}