name: CodeRabbit AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: "20"

jobs:
  coderabbit-review:
    name: CodeRabbit AI Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better context

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run CodeRabbit AI Review
        uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: true
          path_filters: |
            !node_modules/**
            !.next/**
            !coverage/**
            !dist/**
            !build/**
            !*.lock
            !*.log
          language: en-US
          openai_light_model: gpt-4o-mini
          openai_heavy_model: gpt-5
          openai_timeout_ms: 900000
          bot_icon: ü§ñ
          enable_release_notes: true
          custom_labels: |
            - ai-review-complete

      - name: Add review summary comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const coderabbitReviews = reviews.filter(r =>
              r.user.login.includes('coderabbit') ||
              r.body.includes('CodeRabbit')
            );

            if (coderabbitReviews.length > 0) {
              const summary = `## ü§ñ CodeRabbit AI Review Summary

              CodeRabbit has completed its analysis of this pull request.

              **Reviews Posted**: ${coderabbitReviews.length}
              **Status**: ‚úÖ Analysis complete

              Please review the inline comments for detailed feedback on:
              - Code quality and best practices
              - Potential bugs and issues
              - Performance optimization suggestions
              - Security considerations
              - Documentation improvements

              ---
              *Powered by CodeRabbit AI*`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  coderabbit-respond:
    name: CodeRabbit Response Handler
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_review_comment'

    steps:
      - name: Handle CodeRabbit conversation
        uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          openai_light_model: gpt-4o-mini
          openai_heavy_model: gpt-5

  integration-status:
    name: CodeRabbit Integration Status
    runs-on: ubuntu-latest
    needs: [coderabbit-review]
    if: always()

    steps:
      - name: Report integration status
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = '${{ needs.coderabbit-review.result }}';
            const icon = conclusion === 'success' ? '‚úÖ' : '‚ö†Ô∏è';
            const status = conclusion === 'success' ? 'completed successfully' : 'completed with warnings';

            const message = `${icon} **CodeRabbit Integration**: AI code review ${status}

            The automated AI review has been ${conclusion === 'success' ? 'completed' : 'processed'}.
            ${conclusion === 'success' ? 'Review the inline comments for detailed feedback.' : 'Check the workflow logs for details.'}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
