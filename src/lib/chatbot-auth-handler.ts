/**
 * Enhanced Chatbot Authentication Handlers
 * Autentica√ß√£o robusta com verifica√ß√£o de cadastro e assinatura ativa
 *
 * Melhorias:
 * - Rate limiting por usu√°rio
 * - Detec√ß√£o de sess√µes duplicadas
 * - Valida√ß√£o de sess√£o robusta
 * - Auto-renova√ß√£o de sess√£o
 * - Logs de auditoria de autentica√ß√£o
 */
import { prisma } from '@/lib/prisma'
import { sendPulseClient } from '@/lib/sendpulse-client'
import { logger, LogCategory } from '@/lib/logger'

/**
 * Rate Limiter para tentativas de autentica√ß√£o
 */
const authAttempts = new Map<string, { count: number; resetAt: number }>()
const MAX_AUTH_ATTEMPTS = 5
const AUTH_WINDOW_MS = 15 * 60 * 1000 // 15 minutos

/**
 * Cache de sess√µes ativas para valida√ß√£o r√°pida
 */
const sessionCache = new Map<string, { userId: string; expiresAt: Date; userName: string }>()

/**
 * Verifica rate limit para autentica√ß√£o
 */
function checkAuthRateLimit(phone: string): { allowed: boolean; remaining: number; resetAt: number } {
  const now = Date.now()
  const key = `auth:${phone}`

  let entry = authAttempts.get(key)

  // Resetar se expirou
  if (!entry || now > entry.resetAt) {
    entry = { count: 0, resetAt: now + AUTH_WINDOW_MS }
    authAttempts.set(key, entry)
  }

  entry.count++

  return {
    allowed: entry.count <= MAX_AUTH_ATTEMPTS,
    remaining: Math.max(0, MAX_AUTH_ATTEMPTS - entry.count),
    resetAt: entry.resetAt
  }
}

/**
 * Reseta rate limit ap√≥s autentica√ß√£o bem-sucedida
 */
function resetAuthRateLimit(phone: string): void {
  authAttempts.delete(`auth:${phone}`)
}

/**
 * Detecta e remove sess√µes duplicadas
 */
async function removeDuplicateSessions(userId: string, phone: string, keepSessionId?: string): Promise<number> {
  try {
    const result = await prisma.chatbotSession.updateMany({
      where: {
        userId,
        phone,
        status: 'ACTIVE',
        ...(keepSessionId && { id: { not: keepSessionId } })
      },
      data: {
        status: 'TERMINATED',
        terminatedAt: new Date(),
        terminationReason: 'Nova sess√£o iniciada - sess√£o anterior terminada automaticamente'
      }
    })

    if (result.count > 0) {
      logger.info(LogCategory.WHATSAPP, 'Sess√µes duplicadas removidas', {
        userId,
        phone,
        count: result.count
      })
    }

    return result.count
  } catch (error) {
    logger.error(LogCategory.WHATSAPP, 'Erro ao remover sess√µes duplicadas', {
      userId,
      phone,
      error: error instanceof Error ? error.message : 'Unknown'
    })
    return 0
  }
}

/**
 * Limpa cache de sess√µes expiradas
 */
function cleanupSessionCache(): void {
  const now = new Date()
  for (const [key, value] of sessionCache.entries()) {
    if (value.expiresAt < now) {
      sessionCache.delete(key)
    }
  }
}

// Limpar cache a cada 5 minutos
setInterval(cleanupSessionCache, 5 * 60 * 1000)
/**
 * Normaliza n√∫mero de telefone brasileiro para formato padr√£o
 * Remove caracteres especiais e garante formato com DDD + 9 d√≠gitos
 */
function normalizePhoneNumber(phone: string): string {
  if (!phone) return ''
  // Remove todos os caracteres n√£o num√©ricos
  const cleaned = phone.replace(/\D/g, '')
  // Verificar se √© n√∫mero brasileiro v√°lido (com DDD)
  if (cleaned.length === 10 || cleaned.length === 11) {
    // Se tiver 11 d√≠gitos, remove o 9 inicial (n√∫meros de celular)
    if (cleaned.length === 11 && cleaned.startsWith('9')) {
      return cleaned.substring(1)
    }
    return cleaned
  }
  // Retorna o n√∫mero limpo se n√£o seguir o padr√£o brasileiro
  return cleaned
}
/**
 * Valida se o formato do n√∫mero √© v√°lido para Brasil
 */
function isValidBrazilianPhone(phone: string): boolean {
  const normalized = normalizePhoneNumber(phone)
  // N√∫meros brasileiros devem ter 10 d√≠gitos (fixo) ou 11 (celular sem o 9)
  return normalized.length === 10 || normalized.length === 11
}
/**
 * Verifica se a assinatura est√° realmente ativa e em bom status
 */
function isSubscriptionActiveAndValid(status: string): boolean {
  const validStatuses = ['ACTIVE']
  return validStatuses.includes(status)
}
/**
 * Gera mensagem informativa sobre status espec√≠fico da assinatura
 */
function generateSubscriptionStatusMessage(status: string, userName: string, planType?: string): string {
  const statusConfig = {
    'PAUSED': {
      emoji: '‚è∏Ô∏è',
      label: 'Pausada',
      message: `Ol√° ${userName}! üëã\n\nSua assinatura est√° *Pausada* no momento.\n\nPara reativar:\nüëâ https://svlentes.shop/area-assinante\n\nOu fale conosco:\nüìû WhatsApp: (33) 98606-1427`
    },
    'OVERDUE': {
      emoji: '‚ö†Ô∏è',
      label: 'Em Atraso',
      message: `Ol√° ${userName}! üëã\n\nIdentificamos que sua assinatura est√° *Em Atraso*.\n\nPara regularizar:\nüí≥ Acesse sua √°rea do assinante\nüëâ https://svlentes.shop/area-assinante\n\nPrecisa de ajuda? Fale conosco:\nüìû WhatsApp: (33) 98606-1427`
    },
    'SUSPENDED': {
      emoji: 'üîí',
      label: 'Suspensa',
      message: `Ol√° ${userName}! üëã\n\nSua assinatura est√° *Suspensa* no momento.\n\nPara regularizar:\nüìû Fale com nossa equipe:\nüìû WhatsApp: (33) 98606-1427\n\nHor√°rio de atendimento: Seg-Sex, 9h-18h`
    },
    'CANCELLED': {
      emoji: '‚ùå',
      label: 'Cancelada',
      message: `Ol√° ${userName}! üëã\n\nN√£o encontramos uma assinatura ativa para este n√∫mero.\n\nPara assinar novamente:\nüëâ https://svlentes.shop\n\nD√∫vidas? Fale conosco:\nüìû WhatsApp: (33) 98606-1427`
    },
    'EXPIRED': {
      emoji: '‚è∞',
      label: 'Expirada',
      message: `Ol√° ${userName}! üëã\n\nSua assinatura expirou.\n\nPara renovar:\nüëâ https://svlentes.shop\n\nD√∫vidas? Fale conosco:\nüìû WhatsApp: (33) 98606-1427`
    },
    'REFUNDED': {
      emoji: 'üí∞',
      label: 'Reembolsada',
      message: `Ol√° ${userName}! üëã\n\nN√£o encontramos uma assinatura ativa para este n√∫mero.\n\nPara assinar novamente:\nüëâ https://svlentes.shop\n\nD√∫vidas? Fale conosco:\nüìû WhatsApp: (33) 98606-1427`
    }
  }
  const config = statusConfig[status as keyof typeof statusConfig]
  if (config) {
    return config.message
  }
  // Status n√£o reconhecido ou gen√©rico
  return `Ol√° ${userName}! üëã\n\nN√£o conseguimos identificar sua assinatura atual.\n\nPara verificar seu status:\nüëâ https://svlentes.shop/area-assinante\n\nOu fale conosco:\nüìû WhatsApp: (33) 98606-1427`
}
export interface AuthHandlerResult {
  success: boolean
  message: string
  requiresResponse: boolean
  sessionToken?: string
  userId?: string
  userName?: string
  error?: string
}
/**
 * Autentica usu√°rio robustamente pelo n√∫mero de WhatsApp
 * Verifica cadastro, formato de n√∫mero e status da assinatura
 */
export async function authenticateByPhone(phone: string): Promise<AuthHandlerResult> {
  try {
    // Validar e normalizar o n√∫mero de telefone
    if (!phone || !isValidBrazilianPhone(phone)) {
      return {
        success: false,
        message: '‚ùå *Formato de n√∫mero inv√°lido*\n\nPor favor, envie uma mensagem de um n√∫mero de telefone brasileiro v√°lido.\n\nExemplos v√°lidos:\nüì± (33) 9XXXX-YYYY\nüì± 339XXXXXXXX\n\nPara suporte:\nüìû WhatsApp: (33) 98606-1427',
        requiresResponse: true,
        error: 'invalid_phone_format'
      }
    }
    const normalizedPhone = normalizePhoneNumber(phone)

    // Verificar rate limit
    const rateLimit = checkAuthRateLimit(normalizedPhone)
    if (!rateLimit.allowed) {
      const minutesRemaining = Math.ceil((rateLimit.resetAt - Date.now()) / 1000 / 60)
      logger.warn(LogCategory.WHATSAPP, 'Rate limit excedido para autentica√ß√£o', {
        phone: normalizedPhone,
        attempts: MAX_AUTH_ATTEMPTS,
        resetIn: minutesRemaining
      })

      return {
        success: false,
        message: `‚è±Ô∏è *Muitas tentativas de autentica√ß√£o*\n\nPor favor, aguarde ${minutesRemaining} minuto(s) antes de tentar novamente.\n\nSe precisar de ajuda imediata:\nüìû WhatsApp: (33) 98606-1427`,
        requiresResponse: true,
        error: 'rate_limit_exceeded'
      }
    }

    logger.info(LogCategory.WHATSAPP, 'Processando autentica√ß√£o por telefone', {
      originalPhone: phone,
      normalizedPhone,
      rateLimitRemaining: rateLimit.remaining
    })
    // Buscar usu√°rio pelo telefone normalizado (busca em ambos os campos)
    const user = await prisma.user.findFirst({
      where: {
        OR: [
          { phone: normalizedPhone },
          { whatsapp: normalizedPhone },
          { phone: phone },
          { whatsapp: phone }
        ]
      },
      include: {
        subscriptions: {
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    })
    if (!user) {
      return {
        success: false,
        message: '‚ùå *N√£o encontramos uma conta cadastrada*\n\nVerificamos em nosso sistema e n√£o localizamos uma conta associada a este n√∫mero de WhatsApp.\n\nüìã *Para criar sua assinatura:*\nüëâ Acesse: https://svlentes.shop/assinar\n\nüìû *Precisa de ajuda?*\n‚Ä¢ WhatsApp: (33) 98606-1427\n‚Ä¢ Site: https://svlentes.shop',
        requiresResponse: true,
        error: 'user_not_found'
      }
    }
    // Verificar se tem alguma assinatura (qualquer status)
    const hasSubscription = user.subscriptions && user.subscriptions.length > 0
    if (!hasSubscription) {
      return {
        success: false,
        message: `Ol√° ${user.name || 'Cliente'}! üëã\n\n*Nenhuma assinatura encontrada*\n\nN√£o localizamos nenhuma assinatura associada √† sua conta.\n\nüìã *Para assinar:*\nüëâ Acesse: https://svlentes.shop/planos\n\nüìû *Suporte especializado:*\n‚Ä¢ WhatsApp: (33) 98606-1427\n‚Ä¢ Hor√°rio: Seg-Sex, 9h-18h`,
        requiresResponse: true,
        error: 'no_subscription'
      }
    }
    // Verificar se a assinatura est√° realmente ativa
    const subscription = user.subscriptions[0]
    const isActiveSubscription = isSubscriptionActiveAndValid(subscription.status)
    if (!isActiveSubscription) {
      // Gerar mensagem espec√≠fica baseada no status
      const statusMessage = generateSubscriptionStatusMessage(
        subscription.status,
        user.name || 'Cliente',
        subscription.planType
      )
      return {
        success: false,
        message: statusMessage,
        requiresResponse: true,
        error: `subscription_${subscription.status.toLowerCase()}`
      }
    }
    // Remover sess√µes duplicadas antes de criar nova
    await removeDuplicateSessions(user.id, normalizedPhone)

    // Criar ou atualizar sess√£o
    const sessionToken = generateSessionToken()
    const expiresAt = new Date()
    expiresAt.setHours(expiresAt.getHours() + 24) // 24 horas

    // Verificar se j√° existe sess√£o ativa para este telefone
    const existingSession = await prisma.chatbotSession.findFirst({
      where: {
        phone: normalizedPhone,
        userId: user.id
      }
    })

    let sessionId: string

    if (existingSession) {
      // Atualizar sess√£o existente
      const updated = await prisma.chatbotSession.update({
        where: { id: existingSession.id },
        data: {
          sessionToken,
          status: 'ACTIVE',
          expiresAt,
          lastActivityAt: new Date()
        }
      })
      sessionId = updated.id
    } else {
      // Criar nova sess√£o
      const created = await prisma.chatbotSession.create({
        data: {
          userId: user.id,
          phone: normalizedPhone,
          sessionToken,
          status: 'ACTIVE',
          expiresAt,
          lastActivityAt: new Date()
        }
      })
      sessionId = created.id
    }

    // Adicionar ao cache de sess√µes para valida√ß√£o r√°pida
    sessionCache.set(sessionToken, {
      userId: user.id,
      expiresAt,
      userName: user.name || 'Cliente'
    })

    // Resetar rate limit ap√≥s autentica√ß√£o bem-sucedida
    resetAuthRateLimit(normalizedPhone)

    logger.info(LogCategory.WHATSAPP, 'Autentica√ß√£o autom√°tica por telefone bem-sucedida', {
      phone: normalizedPhone,
      userId: user.id,
      userName: user.name,
      sessionId,
      expiresAt: expiresAt.toISOString()
    })
    logger.info(LogCategory.WHATSAPP, 'Usu√°rio autenticado com sucesso', {
      normalizedPhone,
      userId: user.id,
      userName: user.name,
      subscriptionStatus: subscription.status
    })
    // Obter detalhes da assinatura para mensagem personalizada
    const statusEmoji = '‚úÖ'
    const statusLabel = 'Ativa'
    // Formatar datas de forma amig√°vel
    const renewalDate = new Date(subscription.renewalDate)
    const renewalFormatted = renewalDate.toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: 'long',
      year: 'numeric'
    })
    // Calcular dias at√© a renova√ß√£o
    const today = new Date()
    const daysUntilRenewal = Math.ceil((renewalDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24))
    const renewalInfo = daysUntilRenewal > 0
      ? `em ${daysUntilRenewal} dia(s)`
      : daysUntilRenewal === 0
        ? 'hoje!'
        : `h√° ${Math.abs(daysUntilRenewal)} dia(s)`
    // Mensagem de boas-vindas melhorada e personalizada
    const welcomeMessage = `${statusEmoji} *Bem-vindo(a) √† SV Lentes!*
Ol√° ${user.name || 'Cliente'}! üëã
*Identificamos sua assinatura ativa:*
üì¶ Plano: ${subscription.planType}
üìÖ Renova√ß√£o: ${renewalFormatted} (${renewalInfo})
üí∞ Mensalidade: R$ ${subscription.monthlyValue.toFixed(2)}
*Como posso ajudar voc√™ hoje?*
1Ô∏è‚É£ üìã *Ver detalhes da assinatura*
2Ô∏è‚É£ üì¶ *Rastrear meu pedido*
3Ô∏è‚É£ üìÑ *Baixar nota fiscal*
4Ô∏è‚É£ üìç *Atualizar endere√ßo*
5Ô∏è‚É£ üí≥ *Atualizar pagamento*
6Ô∏è‚É£ üîÑ *Alterar plano*
7Ô∏è‚É£ ‚è∏Ô∏è *Pausar assinatura*
8Ô∏è‚É£ üìû *Falar com atendente*
Digite o n√∫mero da op√ß√£o ou descreva sua necessidade! üòä
---
*Dr. Philipe Saraiva Cruz (CRM-MG 69.870)*
*Atendimento: Seg-Sex, 9h-18h*`
    return {
      success: true,
      message: welcomeMessage,
      requiresResponse: true,
      sessionToken,
      userId: user.id,
      userName: user.name || undefined
    }
  } catch (error) {
    logger.error(LogCategory.WHATSAPP, 'Erro ao autenticar por telefone', {
      phone,
      error: error instanceof Error ? error.message : 'Unknown'
    })
    return {
      success: false,
      message: '‚ùå Erro ao verificar sua conta. Por favor, tente novamente ou entre em contato:\nüìû WhatsApp: (33) 98606-1427',
      requiresResponse: true,
      error: error instanceof Error ? error.message : 'unknown_error'
    }
  }
}
/**
 * Gera token de sess√£o √∫nico
 */
function generateSessionToken(): string {
  const timestamp = Date.now().toString(36)
  const randomPart = Math.random().toString(36).substring(2, 15)
  return `chatbot_${timestamp}_${randomPart}`
}
/**
 * Valida se o usu√°rio est√° autenticado (verifica sess√£o existente)
 *
 * Melhorias:
 * - Cache de sess√µes para valida√ß√£o r√°pida
 * - Auto-renova√ß√£o de sess√£o pr√≥xima ao vencimento
 * - Valida√ß√£o robusta com fallback
 */
export async function isUserAuthenticated(phone: string): Promise<{
  authenticated: boolean
  sessionToken?: string
  session?: any
  userId?: string
  userName?: string
  autoRenewed?: boolean
}> {
  try {
    const normalizedPhone = normalizePhoneNumber(phone)

    const session = await prisma.chatbotSession.findFirst({
      where: {
        phone: normalizedPhone,
        status: 'ACTIVE',
        expiresAt: {
          gt: new Date()
        }
      },
      include: {
        user: {
          select: {
            id: true,
            name: true
          }
        }
      }
    })

    if (!session) {
      logger.debug(LogCategory.WHATSAPP, 'Nenhuma sess√£o ativa encontrada', {
        phone: normalizedPhone
      })
      return {
        authenticated: false
      }
    }

    // Verificar se a sess√£o est√° pr√≥xima de expirar (menos de 2 horas)
    const now = new Date()
    const expiresIn = session.expiresAt.getTime() - now.getTime()
    const twoHoursInMs = 2 * 60 * 60 * 1000
    let autoRenewed = false

    if (expiresIn < twoHoursInMs && expiresIn > 0) {
      // Auto-renovar sess√£o
      const newExpiresAt = new Date()
      newExpiresAt.setHours(newExpiresAt.getHours() + 24)

      await prisma.chatbotSession.update({
        where: { id: session.id },
        data: {
          expiresAt: newExpiresAt,
          lastActivityAt: now
        }
      })

      // Atualizar cache
      sessionCache.set(session.sessionToken, {
        userId: session.userId,
        expiresAt: newExpiresAt,
        userName: session.user.name || 'Cliente'
      })

      logger.info(LogCategory.WHATSAPP, 'Sess√£o auto-renovada', {
        phone: normalizedPhone,
        userId: session.userId,
        newExpiresAt: newExpiresAt.toISOString()
      })

      autoRenewed = true
    } else {
      // Apenas atualizar √∫ltima atividade
      await prisma.chatbotSession.update({
        where: { id: session.id },
        data: { lastActivityAt: now }
      })
    }

    // Incrementar contador de comandos executados
    await prisma.chatbotSession.update({
      where: { id: session.id },
      data: { commandsExecuted: { increment: 1 } }
    })

    logger.debug(LogCategory.WHATSAPP, 'Sess√£o validada com sucesso', {
      phone: normalizedPhone,
      userId: session.userId,
      autoRenewed,
      expiresAt: session.expiresAt
    })

    return {
      authenticated: true,
      sessionToken: session.sessionToken,
      session,
      userId: session.userId,
      userName: session.user.name || undefined,
      autoRenewed
    }
  } catch (error) {
    logger.error(LogCategory.WHATSAPP, 'Erro ao verificar autentica√ß√£o', {
      phone,
      error: error instanceof Error ? error.message : 'Unknown'
    })
    return {
      authenticated: false
    }
  }
}