/**
 * Interactive UX System
 * Sistema de experi√™ncia do usu√°rio com menus interativos, onboarding e fluxos guiados
 */

import { sendPulseClient } from './sendpulse-client'
import { ConversationMemory } from './advanced-conversation-memory'
import { logger, LogCategory } from './logger'

export type MenuType =
  | 'main_menu'
  | 'subscription_menu'
  | 'delivery_menu'
  | 'billing_menu'
  | 'support_menu'
  | 'preferences_menu'
  | 'onboarding_menu'

export type OnboardingStep =
  | 'welcome'
  | 'collect_name'
  | 'collect_email'
  | 'collect_preferences'
  | 'complete'

export interface InteractiveMenu {
  type: MenuType
  title: string
  description?: string
  options: MenuOption[]
  footer?: string
}

export interface MenuOption {
  id: string
  label: string
  emoji?: string
  description?: string
  action: 'navigate' | 'command' | 'external' | 'input'
  target?: string // Menu target or command
}

export interface OnboardingState {
  step: OnboardingStep
  data: {
    name?: string
    email?: string
    preferredName?: string
    communicationStyle?: 'formal' | 'casual' | 'very_casual'
    useEmojis?: boolean
    notifications?: {
      renewal: boolean
      delivery: boolean
      promotions: boolean
    }
  }
  completed: boolean
}

/**
 * Interactive UX System
 */
export class InteractiveUXSystem {
  /**
   * Show main menu to user
   */
  async showMainMenu(
    phone: string,
    memory: ConversationMemory,
    isChatOpened: boolean = true
  ): Promise<void> {
    try {
      const menu = this.buildMainMenu(memory)

      const message = this.formatMenuMessage(menu)

      await sendPulseClient.sendMessageWithQuickReplies(
        phone,
        message,
        menu.options.slice(0, 3).map(opt => `${opt.emoji} ${opt.label}`),
        { isChatOpened }
      )

      logger.info(LogCategory.WHATSAPP, 'Main menu sent', { phone })
    } catch (error) {
      logger.error(LogCategory.WHATSAPP, 'Error showing main menu', { phone, error })
    }
  }

  /**
   * Build main menu based on user context
   */
  private buildMainMenu(memory: ConversationMemory): InteractiveMenu {
    const hasActiveSubscription = memory.longTerm.subscriptionInfo.status === 'ACTIVE'

    const options: MenuOption[] = []

    if (hasActiveSubscription) {
      options.push({
        id: 'view_subscription',
        label: 'Ver assinatura',
        emoji: 'üìã',
        description: 'Detalhes do seu plano e renova√ß√£o',
        action: 'command',
        target: 'view_subscription'
      })

      options.push({
        id: 'track_delivery',
        label: 'Rastrear entrega',
        emoji: 'üì¶',
        description: 'Acompanhar seu pedido',
        action: 'command',
        target: 'track_delivery'
      })

      options.push({
        id: 'manage_subscription',
        label: 'Gerenciar plano',
        emoji: '‚öôÔ∏è',
        description: 'Pausar, alterar ou cancelar',
        action: 'navigate',
        target: 'subscription_menu'
      })
    } else {
      options.push({
        id: 'learn_about_plans',
        label: 'Conhecer planos',
        emoji: 'üíé',
        description: 'Veja nossas op√ß√µes de assinatura',
        action: 'external',
        target: 'https://svlentes.shop/planos'
      })

      options.push({
        id: 'subscribe_now',
        label: 'Assinar agora',
        emoji: '‚ú®',
        description: 'Comece sua assinatura',
        action: 'external',
        target: 'https://svlentes.shop/assinar'
      })
    }

    options.push({
      id: 'billing',
      label: 'Pagamentos',
      emoji: 'üí≥',
      description: 'Faturas e formas de pagamento',
      action: 'navigate',
      target: 'billing_menu'
    })

    options.push({
      id: 'support',
      label: 'Suporte',
      emoji: 'üí¨',
      description: 'Fale com nossa equipe',
      action: 'navigate',
      target: 'support_menu'
    })

    options.push({
      id: 'preferences',
      label: 'Prefer√™ncias',
      emoji: '‚öôÔ∏è',
      description: 'Configurar notifica√ß√µes e privacidade',
      action: 'navigate',
      target: 'preferences_menu'
    })

    return {
      type: 'main_menu',
      title: 'üì± *Menu Principal*',
      description: 'Escolha uma op√ß√£o abaixo:',
      options,
      footer: '\n_Digite o n√∫mero da op√ß√£o ou use os bot√µes_'
    }
  }

  /**
   * Build subscription management menu
   */
  private buildSubscriptionMenu(memory: ConversationMemory): InteractiveMenu {
    const options: MenuOption[] = [
      {
        id: 'view_details',
        label: 'Ver detalhes',
        emoji: 'üìã',
        description: 'Informa√ß√µes completas do plano',
        action: 'command',
        target: 'view_subscription'
      },
      {
        id: 'pause_subscription',
        label: 'Pausar entrega',
        emoji: '‚è∏Ô∏è',
        description: 'Suspender temporariamente',
        action: 'command',
        target: 'pause_subscription'
      },
      {
        id: 'change_plan',
        label: 'Alterar plano',
        emoji: 'üîÑ',
        description: 'Mudar para outro plano',
        action: 'command',
        target: 'change_plan'
      },
      {
        id: 'update_address',
        label: 'Atualizar endere√ßo',
        emoji: 'üìç',
        description: 'Mudar local de entrega',
        action: 'input',
        target: 'update_address'
      },
      {
        id: 'cancel_subscription',
        label: 'Cancelar assinatura',
        emoji: '‚ùå',
        description: 'Encerrar sua assinatura',
        action: 'command',
        target: 'cancel_subscription'
      },
      {
        id: 'back',
        label: 'Voltar',
        emoji: '‚¨ÖÔ∏è',
        description: 'Menu principal',
        action: 'navigate',
        target: 'main_menu'
      }
    ]

    return {
      type: 'subscription_menu',
      title: 'üìã *Gerenciar Assinatura*',
      description: `Plano atual: *${memory.longTerm.subscriptionInfo.planType}*\nStatus: *${memory.longTerm.subscriptionInfo.status}*`,
      options,
      footer: '\n_Escolha uma op√ß√£o:_'
    }
  }

  /**
   * Build billing menu
   */
  private buildBillingMenu(): InteractiveMenu {
    const options: MenuOption[] = [
      {
        id: 'view_invoices',
        label: 'Ver faturas',
        emoji: 'üìÑ',
        description: 'Hist√≥rico de pagamentos',
        action: 'command',
        target: 'view_invoices'
      },
      {
        id: 'update_payment',
        label: 'Atualizar pagamento',
        emoji: 'üí≥',
        description: 'Mudar forma de pagamento',
        action: 'command',
        target: 'update_payment'
      },
      {
        id: 'payment_methods',
        label: 'M√©todos dispon√≠veis',
        emoji: 'üí∞',
        description: 'PIX, cart√£o, boleto',
        action: 'command',
        target: 'payment_methods'
      },
      {
        id: 'billing_support',
        label: 'Suporte financeiro',
        emoji: 'üìû',
        description: 'D√∫vidas sobre pagamentos',
        action: 'navigate',
        target: 'support_menu'
      },
      {
        id: 'back',
        label: 'Voltar',
        emoji: '‚¨ÖÔ∏è',
        action: 'navigate',
        target: 'main_menu'
      }
    ]

    return {
      type: 'billing_menu',
      title: 'üí≥ *Pagamentos*',
      description: 'Gerencie suas faturas e formas de pagamento',
      options,
      footer: '\n_Escolha uma op√ß√£o:_'
    }
  }

  /**
   * Build support menu
   */
  private buildSupportMenu(): InteractiveMenu {
    const options: MenuOption[] = [
      {
        id: 'faq',
        label: 'Perguntas frequentes',
        emoji: '‚ùì',
        description: 'Respostas r√°pidas',
        action: 'command',
        target: 'show_faq'
      },
      {
        id: 'human_support',
        label: 'Falar com atendente',
        emoji: 'üë§',
        description: 'Atendimento humano',
        action: 'command',
        target: 'escalate_to_human'
      },
      {
        id: 'consultation',
        label: 'Agendar consulta',
        emoji: 'üìÖ',
        description: 'Marcar hor√°rio com Dr. Philipe',
        action: 'external',
        target: 'https://svlentes.shop/agendar-consulta'
      },
      {
        id: 'emergency',
        label: 'Emerg√™ncia ocular',
        emoji: 'üö®',
        description: 'Orienta√ß√£o para urg√™ncias',
        action: 'command',
        target: 'emergency_protocol'
      },
      {
        id: 'feedback',
        label: 'Dar feedback',
        emoji: '‚≠ê',
        description: 'Avalie nosso atendimento',
        action: 'input',
        target: 'collect_feedback'
      },
      {
        id: 'back',
        label: 'Voltar',
        emoji: '‚¨ÖÔ∏è',
        action: 'navigate',
        target: 'main_menu'
      }
    ]

    return {
      type: 'support_menu',
      title: 'üí¨ *Suporte*',
      description: 'Como podemos ajudar?',
      options,
      footer: '\nüìû *Contato direto:* (33) 98606-1427'
    }
  }

  /**
   * Build preferences menu
   */
  private buildPreferencesMenu(memory: ConversationMemory): InteractiveMenu {
    const options: MenuOption[] = [
      {
        id: 'notifications',
        label: 'Notifica√ß√µes',
        emoji: 'üîî',
        description: `Ativas: ${Object.values(memory.preferences.notifications).filter(Boolean).length}/4`,
        action: 'command',
        target: 'manage_notifications'
      },
      {
        id: 'communication_style',
        label: 'Estilo de comunica√ß√£o',
        emoji: 'üí¨',
        description: `Atual: ${memory.longTerm.communicationStyle.formalityLevel}`,
        action: 'command',
        target: 'change_communication_style'
      },
      {
        id: 'privacy',
        label: 'Privacidade',
        emoji: 'üîí',
        description: 'Controle seus dados',
        action: 'command',
        target: 'privacy_settings'
      },
      {
        id: 'preferred_name',
        label: 'Nome preferido',
        emoji: '‚úèÔ∏è',
        description: memory.longTerm.preferredName || 'N√£o definido',
        action: 'input',
        target: 'set_preferred_name'
      },
      {
        id: 'reset_preferences',
        label: 'Restaurar padr√µes',
        emoji: '‚Ü©Ô∏è',
        description: 'Voltar configura√ß√µes originais',
        action: 'command',
        target: 'reset_preferences'
      },
      {
        id: 'back',
        label: 'Voltar',
        emoji: '‚¨ÖÔ∏è',
        action: 'navigate',
        target: 'main_menu'
      }
    ]

    return {
      type: 'preferences_menu',
      title: '‚öôÔ∏è *Prefer√™ncias*',
      description: 'Personalize sua experi√™ncia',
      options,
      footer: '\n_Suas configura√ß√µes s√£o salvas automaticamente_'
    }
  }

  /**
   * Format menu message for WhatsApp
   */
  private formatMenuMessage(menu: InteractiveMenu): string {
    let message = `${menu.title}\n`

    if (menu.description) {
      message += `\n${menu.description}\n`
    }

    message += '\n'

    // Add numbered options
    menu.options.forEach((option, index) => {
      const number = index + 1
      const emoji = option.emoji || '‚Ä¢'
      message += `${number}Ô∏è‚É£ ${emoji} *${option.label}*\n`
      if (option.description) {
        message += `   _${option.description}_\n`
      }
    })

    if (menu.footer) {
      message += menu.footer
    }

    return message
  }

  /**
   * Show menu by type
   */
  async showMenu(
    phone: string,
    menuType: MenuType,
    memory: ConversationMemory,
    isChatOpened: boolean = true
  ): Promise<void> {
    let menu: InteractiveMenu

    switch (menuType) {
      case 'main_menu':
        menu = this.buildMainMenu(memory)
        break
      case 'subscription_menu':
        menu = this.buildSubscriptionMenu(memory)
        break
      case 'billing_menu':
        menu = this.buildBillingMenu()
        break
      case 'support_menu':
        menu = this.buildSupportMenu()
        break
      case 'preferences_menu':
        menu = this.buildPreferencesMenu(memory)
        break
      default:
        menu = this.buildMainMenu(memory)
    }

    const message = this.formatMenuMessage(menu)

    await sendPulseClient.sendMessageWithQuickReplies(
      phone,
      message,
      menu.options.slice(0, 3).map(opt => `${opt.emoji} ${opt.label}`),
      { isChatOpened }
    )

    logger.info(LogCategory.WHATSAPP, 'Menu sent', { phone, menuType })
  }

  /**
   * Start onboarding flow for new users
   */
  async startOnboarding(phone: string): Promise<OnboardingState> {
    const state: OnboardingState = {
      step: 'welcome',
      data: {},
      completed: false
    }

    const welcomeMessage = `üëã *Bem-vindo √† SV Lentes!*

Ol√°! Sou o assistente virtual da *Saraiva Vision*.

Estou aqui para ajudar voc√™ com:
‚Ä¢ üìã Gerenciar sua assinatura
‚Ä¢ üì¶ Acompanhar entregas
‚Ä¢ üí≥ Quest√µes de pagamento
‚Ä¢ üìû Suporte especializado

*Vamos come√ßar?*

Para personalizar seu atendimento, preciso de algumas informa√ß√µes b√°sicas. Levar√° apenas 1 minuto! ‚è±Ô∏è`

    await sendPulseClient.sendMessageWithQuickReplies(
      phone,
      welcomeMessage,
      ['‚úÖ Come√ßar', 'üìû Falar com atendente', '‚ÑπÔ∏è Saber mais']
    )

    logger.info(LogCategory.WHATSAPP, 'Onboarding started', { phone })

    return state
  }

  /**
   * Process onboarding step
   */
  async processOnboardingStep(
    phone: string,
    state: OnboardingState,
    userResponse: string
  ): Promise<OnboardingState> {
    switch (state.step) {
      case 'welcome':
        if (userResponse.toLowerCase().includes('come√ßar')) {
          state.step = 'collect_name'
          await this.askForName(phone)
        } else if (userResponse.toLowerCase().includes('atendente')) {
          // Escalate to human
          await sendPulseClient.sendMessage({
            phone,
            message: 'üìû Conectando voc√™ com um atendente...\n\nAguarde um momento.'
          })
          state.completed = true
        }
        break

      case 'collect_name':
        state.data.name = userResponse
        state.step = 'collect_email'
        await this.askForEmail(phone, state.data.name)
        break

      case 'collect_email':
        state.data.email = userResponse
        state.step = 'collect_preferences'
        await this.askForPreferences(phone, state.data.name || 'Cliente')
        break

      case 'collect_preferences':
        // Process preferences response
        state.data.useEmojis = !userResponse.toLowerCase().includes('formal')
        state.data.communicationStyle = userResponse.toLowerCase().includes('formal')
          ? 'formal'
          : 'casual'
        state.step = 'complete'
        await this.completeOnboarding(phone, state)
        break

      case 'complete':
        state.completed = true
        break
    }

    return state
  }

  /**
   * Ask for user name
   */
  private async askForName(phone: string): Promise<void> {
    const message = `‚ú® *√ìtimo!*

Para come√ßar, qual √© o seu *nome completo*?

_Isso me ajudar√° a personalizar seu atendimento._`

    await sendPulseClient.sendMessage({ phone, message })
  }

  /**
   * Ask for user email
   */
  private async askForEmail(phone: string, name: string): Promise<void> {
    const firstName = name.split(' ')[0]

    const message = `üëç *Prazer em conhecer, ${firstName}!*

Agora, qual √© o seu *e-mail*?

_Usaremos para enviar confirma√ß√µes e faturas._

*Exemplo:* seuemail@exemplo.com`

    await sendPulseClient.sendMessage({ phone, message })
  }

  /**
   * Ask for communication preferences
   */
  private async askForPreferences(phone: string, name: string): Promise<void> {
    const message = `üì± *√öltima etapa, ${name}!*

Como voc√™ prefere se comunicar?

*Escolha um estilo:*`

    await sendPulseClient.sendMessageWithQuickReplies(
      phone,
      message,
      ['üòä Casual e amig√°vel', 'üëî Formal e profissional', 'üéâ Descontra√≠do com emojis']
    )
  }

  /**
   * Complete onboarding
   */
  private async completeOnboarding(phone: string, state: OnboardingState): Promise<void> {
    const name = state.data.name || 'Cliente'
    const firstName = name.split(' ')[0]

    const message = `üéâ *Tudo pronto, ${firstName}!*

Seu perfil foi configurado com sucesso!

‚úÖ *Nome:* ${name}
‚úÖ *E-mail:* ${state.data.email}
‚úÖ *Estilo:* ${state.data.communicationStyle === 'formal' ? 'Formal' : 'Casual'}

*O que voc√™ gostaria de fazer agora?*`

    await sendPulseClient.sendMessageWithQuickReplies(
      phone,
      message,
      ['üìã Ver planos', 'üí¨ Fazer uma pergunta', 'üì± Ver menu principal']
    )

    logger.info(LogCategory.WHATSAPP, 'Onboarding completed', {
      phone,
      name: state.data.name
    })
  }

  /**
   * Show quick help card
   */
  async showQuickHelp(phone: string, isChatOpened: boolean = true): Promise<void> {
    const message = `üÜò *Ajuda R√°pida*

*Comandos dispon√≠veis:*

üìã *"minha assinatura"* - Ver detalhes do plano
üì¶ *"rastrear"* - Acompanhar entrega
‚è∏Ô∏è *"pausar"* - Pausar assinatura
üí≥ *"pagamento"* - Faturas e pagamentos
üìû *"atendente"* - Falar com humano
üè† *"menu"* - Menu principal

*Dicas:*
‚Ä¢ Voc√™ pode digitar naturalmente
‚Ä¢ Use n√∫meros para navegar nos menus
‚Ä¢ Digite "ajuda" quando precisar

_üí° Experimente: "quero pausar minha assinatura"_`

    await sendPulseClient.sendMessage({
      phone,
      message,
      isChatOpened
    })
  }

  /**
   * Show FAQ with interactive navigation
   */
  async showFAQ(phone: string, category?: string): Promise<void> {
    const categories = [
      { id: 'subscription', label: 'Assinatura', emoji: 'üìã' },
      { id: 'delivery', label: 'Entregas', emoji: 'üì¶' },
      { id: 'billing', label: 'Pagamentos', emoji: 'üí≥' },
      { id: 'product', label: 'Produtos', emoji: 'üëì' },
      { id: 'account', label: 'Conta', emoji: 'üë§' }
    ]

    if (!category) {
      const message = `‚ùì *Perguntas Frequentes*

Escolha uma categoria:

${categories.map((cat, idx) => `${idx + 1}Ô∏è‚É£ ${cat.emoji} ${cat.label}`).join('\n')}

_Ou digite sua d√∫vida diretamente_`

      await sendPulseClient.sendMessageWithQuickReplies(
        phone,
        message,
        categories.slice(0, 3).map(cat => `${cat.emoji} ${cat.label}`)
      )
    } else {
      // Show FAQs for specific category (would be loaded from database)
      const message = `‚ùì *FAQ - ${category}*\n\n_FAQs would be loaded here from database_\n\nDigite *"voltar"* para categorias`

      await sendPulseClient.sendMessage({ phone, message })
    }
  }
}

// Singleton instance
export const interactiveUX = new InteractiveUXSystem()
